/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['abstract.js']) {
  _$jscoverage['abstract.js'] = [];
  _$jscoverage['abstract.js'][8] = 0;
  _$jscoverage['abstract.js'][11] = 0;
  _$jscoverage['abstract.js'][12] = 0;
  _$jscoverage['abstract.js'][16] = 0;
  _$jscoverage['abstract.js'][30] = 0;
  _$jscoverage['abstract.js'][32] = 0;
  _$jscoverage['abstract.js'][34] = 0;
  _$jscoverage['abstract.js'][42] = 0;
  _$jscoverage['abstract.js'][44] = 0;
  _$jscoverage['abstract.js'][49] = 0;
  _$jscoverage['abstract.js'][54] = 0;
  _$jscoverage['abstract.js'][58] = 0;
  _$jscoverage['abstract.js'][61] = 0;
  _$jscoverage['abstract.js'][71] = 0;
  _$jscoverage['abstract.js'][74] = 0;
  _$jscoverage['abstract.js'][77] = 0;
  _$jscoverage['abstract.js'][79] = 0;
  _$jscoverage['abstract.js'][85] = 0;
  _$jscoverage['abstract.js'][86] = 0;
  _$jscoverage['abstract.js'][96] = 0;
  _$jscoverage['abstract.js'][106] = 0;
  _$jscoverage['abstract.js'][107] = 0;
  _$jscoverage['abstract.js'][110] = 0;
  _$jscoverage['abstract.js'][111] = 0;
  _$jscoverage['abstract.js'][128] = 0;
  _$jscoverage['abstract.js'][129] = 0;
  _$jscoverage['abstract.js'][147] = 0;
  _$jscoverage['abstract.js'][148] = 0;
  _$jscoverage['abstract.js'][152] = 0;
  _$jscoverage['abstract.js'][155] = 0;
  _$jscoverage['abstract.js'][158] = 0;
  _$jscoverage['abstract.js'][161] = 0;
  _$jscoverage['abstract.js'][164] = 0;
  _$jscoverage['abstract.js'][167] = 0;
  _$jscoverage['abstract.js'][172] = 0;
  _$jscoverage['abstract.js'][177] = 0;
  _$jscoverage['abstract.js'][178] = 0;
  _$jscoverage['abstract.js'][179] = 0;
  _$jscoverage['abstract.js'][180] = 0;
  _$jscoverage['abstract.js'][190] = 0;
  _$jscoverage['abstract.js'][205] = 0;
  _$jscoverage['abstract.js'][208] = 0;
  _$jscoverage['abstract.js'][213] = 0;
  _$jscoverage['abstract.js'][216] = 0;
  _$jscoverage['abstract.js'][219] = 0;
  _$jscoverage['abstract.js'][220] = 0;
  _$jscoverage['abstract.js'][223] = 0;
  _$jscoverage['abstract.js'][247] = 0;
  _$jscoverage['abstract.js'][273] = 0;
  _$jscoverage['abstract.js'][287] = 0;
  _$jscoverage['abstract.js'][318] = 0;
  _$jscoverage['abstract.js'][322] = 0;
}
_$jscoverage['abstract.js'][8]++;
function Abstract(proto, properties) {
  _$jscoverage['abstract.js'][11]++;
  if (! (this instanceof Abstract)) {
    _$jscoverage['abstract.js'][12]++;
    return Abstract.create.apply(Abstract, arguments);
    _$jscoverage['abstract.js'][12]++;
    ;
  }
  _$jscoverage['abstract.js'][16]++;
  Object.defineProperties(this, {_meta: {value: {_id: Abstract.utility.generate_hash(null, {random: true}), _type: this.constructor.name || arguments.callee.name, identity: undefined, schema: {}}, configurable: true, writable: true, enumerable: false}});
  _$jscoverage['abstract.js'][30]++;
  this.injectPrototype(proto);
  _$jscoverage['abstract.js'][32]++;
  Abstract.defineProperties(this, properties || {});
  _$jscoverage['abstract.js'][34]++;
  return this;
}
_$jscoverage['abstract.js'][42]++;
Object.defineProperties(Abstract.prototype, {_id: {get: (function () {
  _$jscoverage['abstract.js'][44]++;
  return (function (value) {
  _$jscoverage['abstract.js'][44]++;
  this._meta._id = value;
});
}), configurable: true, enumerable: false}, _type: {get: (function () {
  _$jscoverage['abstract.js'][49]++;
  return (function (value) {
  _$jscoverage['abstract.js'][49]++;
  this._meta._type = value;
});
}), configurable: true, enumerable: false}, _schema: {get: (function () {
  _$jscoverage['abstract.js'][54]++;
  return (function (schema) {
  _$jscoverage['abstract.js'][54]++;
  this._meta.schema = schema;
});
}), enumerable: false}, _path: {get: (function () {
  _$jscoverage['abstract.js'][58]++;
  return Abstract.utility.get_constructors(Abstract.getPrototypeOf(this), {delimiter: "."});
})}, injectPrototype: {get: (function () {
  _$jscoverage['abstract.js'][61]++;
  return Abstract.injectPrototype.bind(Abstract, this);
}), configurable: true, enumerable: true}, create: {value: (function create(id, properties) {
  _$jscoverage['abstract.js'][71]++;
  var Instance = Object.create(this);
  _$jscoverage['abstract.js'][74]++;
  Instance._id(id);
  _$jscoverage['abstract.js'][77]++;
  Abstract.defineProperties(Instance, properties);
  _$jscoverage['abstract.js'][79]++;
  return Instance;
}), enumerable: true}, extend: {value: (function extend() {
  _$jscoverage['abstract.js'][85]++;
  console.log("extending", this.name);
  _$jscoverage['abstract.js'][86]++;
  return (function () {
  _$jscoverage['abstract.js'][86]++;
  console.log(this);
  _$jscoverage['abstract.js'][86]++;
  return this;
}).bind(this);
}), enumerable: true}});
_$jscoverage['abstract.js'][96]++;
Object.defineProperties(module.exports = Abstract, {create: {value: (function create(proto, properties) {
  _$jscoverage['abstract.js'][106]++;
  if (arguments.length === 1) {
    _$jscoverage['abstract.js'][107]++;
    return new Abstract(null, arguments[0]);
  }
  _$jscoverage['abstract.js'][110]++;
  if (arguments.length === 2) {
    _$jscoverage['abstract.js'][111]++;
    return new Abstract(arguments[0], arguments[1]);
  }
}), configurable: true, writable: false, enumerable: true}, defineProperties: {value: (function defineProperties(obj, props) {
  _$jscoverage['abstract.js'][128]++;
  Object.keys(props).forEach((function (key) {
  _$jscoverage['abstract.js'][128]++;
  Abstract.defineProperty(obj, key, props[key]);
}));
  _$jscoverage['abstract.js'][129]++;
  return obj;
}), configurable: true, enumerable: true, writable: true}, defineProperty: {value: (function defineProperty(obj, key, prop) {
  _$jscoverage['abstract.js'][147]++;
  if ("object" !== typeof prop || (! prop.value && ! prop.get)) {
    _$jscoverage['abstract.js'][148]++;
    prop = {value: prop, configurable: true, writable: true, type: typeof prop};
  }
  _$jscoverage['abstract.js'][152]++;
  Abstract.utility.extend(prop, Abstract.defaults());
  _$jscoverage['abstract.js'][155]++;
  Object.defineProperty(obj, key, obj._meta.schema[key] = prop);
  _$jscoverage['abstract.js'][158]++;
  if (key === "constructor") {
  }
  _$jscoverage['abstract.js'][161]++;
  if (key === "prototype") {
  }
  _$jscoverage['abstract.js'][164]++;
  if (key === "__proto__") {
  }
  _$jscoverage['abstract.js'][167]++;
  if (prop.hasOwnProperty("watch")) {
  }
  _$jscoverage['abstract.js'][172]++;
  if (prop.hasOwnProperty("wrap")) {
  }
  _$jscoverage['abstract.js'][177]++;
  if (prop.hasOwnProperty("properties")) {
    _$jscoverage['abstract.js'][178]++;
    Abstract.utility.each(prop.properties, (function (fn, key, array) {
  _$jscoverage['abstract.js'][179]++;
  if ("function" === typeof prop.value) {
    _$jscoverage['abstract.js'][180]++;
    Object.defineProperty(prop.value, key, {value: fn, configurable: true, enumerable: true});
  }
}));
  }
  _$jscoverage['abstract.js'][190]++;
  return obj;
}), configurable: true, enumerable: true}, injectPrototype: {value: (function injectPrototype(target, proto) {
  _$jscoverage['abstract.js'][205]++;
  proto = proto || {};
  _$jscoverage['abstract.js'][208]++;
  if ("function" === typeof proto) {
  }
  _$jscoverage['abstract.js'][213]++;
  proto.__proto__ = target.__proto__;
  _$jscoverage['abstract.js'][216]++;
  target.__proto__ = proto;
  _$jscoverage['abstract.js'][219]++;
  if (! target.__proto__.constructor) {
    _$jscoverage['abstract.js'][220]++;
    target.__proto__.constructor = (function () {
});
  }
  _$jscoverage['abstract.js'][223]++;
  return target;
}), configurable: true, enumerable: true}, appendChain: {value: (function appendChain() {
}), configurable: true, enumerable: true, writable: true}, getPrototypeOf: {value: (function getPrototypeOf(obj) {
  _$jscoverage['abstract.js'][247]++;
  return obj.__proto__ || undefined;
}), configurable: true, enumerable: true, writable: true}, isPrototypeOf: {value: (function isPrototypeOf() {
}), configurable: true, enumerable: false, writable: true}, setPrototypeOf: {value: (function setPrototypeOf(obj, proto) {
  _$jscoverage['abstract.js'][273]++;
  obj.__proto__ = proto;
}), configurable: true, enumerable: true, writable: true}, utility: {value: require("./utility"), configurable: true, enumerable: false, writable: true}, defaults: {value: (function defaults(data) {
  _$jscoverage['abstract.js'][287]++;
  return data? Abstract._data.defaults = data: Abstract._data.defaults = Abstract._data.defaults || {};
}), configurable: true, enumerable: false, writable: true}, logger: {value: {log: (function log() {
}), info: (function info() {
}), error: console.error, debug: require("debug")("abstract")}, configurable: true, enumerable: false, writable: true}, build: {value: (function build(options) {
  _$jscoverage['abstract.js'][318]++;
  var script;
  _$jscoverage['abstract.js'][322]++;
  return script;
}), configurable: true, enumerable: false, writable: true}, _data: {value: {}, writable: true, enumerable: false}});
_$jscoverage['abstract.js'].source = ["/**"," * Create custom objects and methods by aggregating and abstracting esources."," *"," * @version 0.0.1"," * @class Abstract"," * @constractor"," */","function Abstract( proto, properties ) {","","  // Prevent from being called in the wrong context; route to Abstract.create()","  if( !( this instanceof Abstract ) ) {","    return Abstract.create.apply( Abstract, arguments );;","  }","","  // Create Instance from context","  Object.defineProperties( this, {","    _meta: {","      value: {","        _id: Abstract.utility.generate_hash( null, { random: true }),","        _type: this.constructor.name || arguments.callee.name,","        identity: undefined,","        schema: {}","      },","      configurable: true,","      writable: true,","      enumerable: false","    }","  });","","  this.injectPrototype( proto );","","  Abstract.defineProperties( this, properties || {} );","","  return this;","","}","","/**"," * Prototypal Properties"," *"," */","Object.defineProperties( Abstract.prototype, {","  _id: {","    get: function() { return function( value ) { this._meta._id = value; } },","    configurable: true,","    enumerable: false","  },","  _type: {","    get: function() { return function( value ) { this._meta._type = value; } },","    configurable: true,","    enumerable: false","  },","  _schema: {","    get: function() { return function( schema ) { this._meta.schema = schema; } },","    enumerable: false","  },","  _path: {","    get: function() { return Abstract.utility.get_constructors( Abstract.getPrototypeOf( this ), { delimiter: '.' } ); }","  },","  injectPrototype: {","    get: function() { return Abstract.injectPrototype.bind( Abstract, this ); },","    configurable: true,","    enumerable: true","  },","  create: {","    /**","     * Instantiate Children.","     *","     */","    value: function create( id, properties ) {","      var Instance = Object.create( this );","","      // Sexy.","      Instance._id( id );","","      // Properties is most liekly just basic data.","      Abstract.defineProperties( Instance, properties );","","      return Instance;","    },","    enumerable: true","  },","  extend: {","    value: function extend() {","      console.log( 'extending', this.name );","      return function() { console.log( this ); return this; }.bind( this );","    },","    enumerable: true","  },","});","","/**"," * Constructor Properties"," *"," */","Object.defineProperties( module.exports = Abstract, {","  create: {","    /**","     * Creates a new object with the specified prototype object and properties.","     * Copy the functions from the superclass prototype to the subclass prototype.","     *","     * @param proto {Object|null} Superclass to use as prototype for new object.","     */","    value: function create( proto, properties ) {","","      if( arguments.length === 1 ) {","        return new Abstract( null, arguments[0] );","      }","","      if( arguments.length === 2 ) {","        return new Abstract( arguments[0], arguments[1] );","      }","","    },","    configurable: true,","    writable: false,","    enumerable: true","  },","  defineProperties: {","    /**","     * Configure multiple object properties.","     *","     * @param obj","     * @param props","     * @returns {*}","     */","    value: function defineProperties( obj, props ) {","      Object.keys( props ).forEach( function( key ) { Abstract.defineProperty( obj, key, props[ key ] ); });","      return obj;","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  defineProperty: {","    /**","     * Configure single object property.","     *","     * @param obj","     * @param key","     * @param prop","     * @returns {*}","     */","    value: function defineProperty( obj, key, prop ) {","","      // General Descriptors for basic data","      if( 'object' !== typeof prop || ( !prop.value &amp;&amp; !prop.get ) ) {","        prop = { value: prop, configurable: true, writable: true, type: typeof prop }","      }","","      // Apply Defaults","      Abstract.utility.extend( prop, Abstract.defaults() );","","      // Store in Schema and add to Object actual","      Object.defineProperty( obj, key, obj._meta.schema[ key ] = prop );","","      // Handle constructor property","      if( key === 'constructor' ) {}","","      // Handle prototypal properties","      if( key === 'prototype' ) {}","","      // Handle __proto__ property","      if( key === '__proto__' ) {}","","      // Monitor a Property.","      if( prop.hasOwnProperty( 'watch' ) ) {","        // Abstract.utility.watch( prop, this.watcher ); // @todo Not sure which function to pipeline to.","      }","","      // Wrap the property into a getter and setter","      if( prop.hasOwnProperty( 'wrap' ) ) {","        // @todo","      }","","        // Add Properties to (presumably) constructor.","      if( prop.hasOwnProperty( 'properties' ) ) {","        Abstract.utility.each( prop.properties, function( fn, key, array ) {","          if( 'function' === typeof prop.value ) {","            Object.defineProperty( prop.value, key, {","              value: fn,","              configurable: true,","              enumerable: true","            });","            //Abstract.injectPrototype( fn, obj );","          }","        });","      }","","      return obj;","","    },","    configurable: true,","    enumerable: true","  },","  injectPrototype: {","    /**","     * Inserts an object/prototype into a target object.","     *","     * @param target","     * @param proto","     * @returns {*}","     */","    value: function injectPrototype( target, proto ) {","      proto = proto || {};","","      // Prototype requires instantiation","      if( 'function' === typeof proto ) {","        //proto = proto.call( this );","      }","","      // Move current immediate prototype object into new protototype object","      proto.__proto__ = target.__proto__;","","      // Insert new prototype into chain.","      target.__proto__ = proto;","","      // Ensure there is a constructor","      if( !target.__proto__.constructor ) {","        target.__proto__.constructor = function() {}","      }","","      return target;","","    },","    configurable: true,","    enumerable: true","  },","  appendChain: {","    /**","     * Planned.","     *","     */","    value: function appendChain() {},","    configurable: true,","    enumerable: true,","    writable: true","  },","  getPrototypeOf: {","    /**","     * Planned.","     *","     * @param obj","     * @param proto","     */","    value: function getPrototypeOf( obj ) {","      return obj.__proto__ || undefined;","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  isPrototypeOf: {","    /**","     * Planned.","     *","     * @param obj","     * @param proto","     */","    value: function isPrototypeOf() {},","    configurable: true,","    enumerable: false,","    writable: true","  },","  setPrototypeOf: {","    /**","     * Basic Wrapper - will be more fault-tolerant in future.","     *","     * @param obj","     * @param proto","     */","    value: function setPrototypeOf( obj, proto ) {","      obj.__proto__ = proto;","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  utility: {","    value: require( './utility' ),","    configurable: true,","    enumerable: false,","    writable: true","  },","  defaults: {","    value: function defaults( data ) {","      return data ? Abstract._data.defaults = data : Abstract._data.defaults = Abstract._data.defaults || {};","    },","    configurable: true,","    enumerable: false,","    writable: true","  },","  logger: {","    /**","     * Define Logger","     *","     */","    value: {","      log: function log() {},","      info: function info() {},","      error: console.error,","      debug: require( 'debug' )( 'abstract' )","    },","    configurable: true,","    enumerable: false,","    writable: true","  },","  build: {","    /**","     * Generate Standalone JavaScript for browser integration","     *","     * The result is not cached and is expected that the rendering engine does the caching.","     *","     * @param options","     * @returns {String}","     */","    value: function build( options ) {","      var script;","      // read this file","      // include dependencies","      // minify","      return script;","    },","    configurable: true,","    enumerable: false,","    writable: true","  },","  _data: {","    value: {},","    writable: true,","    enumerable: false","  }","});","","","",""];
