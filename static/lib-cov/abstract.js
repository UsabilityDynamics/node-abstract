/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['abstract.js']) {
  _$jscoverage['abstract.js'] = [];
  _$jscoverage['abstract.js'][8] = 0;
  _$jscoverage['abstract.js'][11] = 0;
  _$jscoverage['abstract.js'][12] = 0;
  _$jscoverage['abstract.js'][16] = 0;
  _$jscoverage['abstract.js'][17] = 0;
  _$jscoverage['abstract.js'][21] = 0;
  _$jscoverage['abstract.js'][32] = 0;
  _$jscoverage['abstract.js'][43] = 0;
  _$jscoverage['abstract.js'][44] = 0;
  _$jscoverage['abstract.js'][61] = 0;
  _$jscoverage['abstract.js'][62] = 0;
  _$jscoverage['abstract.js'][74] = 0;
  _$jscoverage['abstract.js'][75] = 0;
  _$jscoverage['abstract.js'][89] = 0;
  _$jscoverage['abstract.js'][90] = 0;
  _$jscoverage['abstract.js'][105] = 0;
  _$jscoverage['abstract.js'][106] = 0;
  _$jscoverage['abstract.js'][121] = 0;
  _$jscoverage['abstract.js'][133] = 0;
  _$jscoverage['abstract.js'][150] = 0;
  _$jscoverage['abstract.js'][151] = 0;
  _$jscoverage['abstract.js'][155] = 0;
  _$jscoverage['abstract.js'][162] = 0;
  _$jscoverage['abstract.js'][184] = 0;
  _$jscoverage['abstract.js'][185] = 0;
  _$jscoverage['abstract.js'][189] = 0;
  _$jscoverage['abstract.js'][190] = 0;
  _$jscoverage['abstract.js'][194] = 0;
  _$jscoverage['abstract.js'][206] = 0;
  _$jscoverage['abstract.js'][209] = 0;
  _$jscoverage['abstract.js'][217] = 0;
  _$jscoverage['abstract.js'][220] = 0;
  _$jscoverage['abstract.js'][224] = 0;
  _$jscoverage['abstract.js'][227] = 0;
  _$jscoverage['abstract.js'][229] = 0;
  _$jscoverage['abstract.js'][238] = 0;
  _$jscoverage['abstract.js'][249] = 0;
  _$jscoverage['abstract.js'][250] = 0;
  _$jscoverage['abstract.js'][253] = 0;
  _$jscoverage['abstract.js'][258] = 0;
  _$jscoverage['abstract.js'][275] = 0;
  _$jscoverage['abstract.js'][276] = 0;
  _$jscoverage['abstract.js'][278] = 0;
  _$jscoverage['abstract.js'][279] = 0;
  _$jscoverage['abstract.js'][289] = 0;
  _$jscoverage['abstract.js'][304] = 0;
  _$jscoverage['abstract.js'][305] = 0;
  _$jscoverage['abstract.js'][306] = 0;
  _$jscoverage['abstract.js'][309] = 0;
  _$jscoverage['abstract.js'][330] = 0;
  _$jscoverage['abstract.js'][331] = 0;
  _$jscoverage['abstract.js'][348] = 0;
  _$jscoverage['abstract.js'][349] = 0;
  _$jscoverage['abstract.js'][352] = 0;
  _$jscoverage['abstract.js'][353] = 0;
  _$jscoverage['abstract.js'][357] = 0;
  _$jscoverage['abstract.js'][359] = 0;
  _$jscoverage['abstract.js'][361] = 0;
  _$jscoverage['abstract.js'][372] = 0;
  _$jscoverage['abstract.js'][375] = 0;
  _$jscoverage['abstract.js'][377] = 0;
  _$jscoverage['abstract.js'][378] = 0;
  _$jscoverage['abstract.js'][382] = 0;
  _$jscoverage['abstract.js'][385] = 0;
  _$jscoverage['abstract.js'][388] = 0;
  _$jscoverage['abstract.js'][391] = 0;
  _$jscoverage['abstract.js'][396] = 0;
  _$jscoverage['abstract.js'][401] = 0;
  _$jscoverage['abstract.js'][402] = 0;
  _$jscoverage['abstract.js'][403] = 0;
  _$jscoverage['abstract.js'][404] = 0;
  _$jscoverage['abstract.js'][414] = 0;
  _$jscoverage['abstract.js'][427] = 0;
  _$jscoverage['abstract.js'][428] = 0;
  _$jscoverage['abstract.js'][441] = 0;
  _$jscoverage['abstract.js'][442] = 0;
  _$jscoverage['abstract.js'][444] = 0;
  _$jscoverage['abstract.js'][448] = 0;
  _$jscoverage['abstract.js'][449] = 0;
  _$jscoverage['abstract.js'][451] = 0;
  _$jscoverage['abstract.js'][453] = 0;
  _$jscoverage['abstract.js'][454] = 0;
  _$jscoverage['abstract.js'][457] = 0;
  _$jscoverage['abstract.js'][464] = 0;
  _$jscoverage['abstract.js'][478] = 0;
  _$jscoverage['abstract.js'][479] = 0;
  _$jscoverage['abstract.js'][480] = 0;
  _$jscoverage['abstract.js'][481] = 0;
  _$jscoverage['abstract.js'][482] = 0;
  _$jscoverage['abstract.js'][483] = 0;
  _$jscoverage['abstract.js'][485] = 0;
  _$jscoverage['abstract.js'][500] = 0;
  _$jscoverage['abstract.js'][501] = 0;
  _$jscoverage['abstract.js'][502] = 0;
  _$jscoverage['abstract.js'][503] = 0;
  _$jscoverage['abstract.js'][505] = 0;
  _$jscoverage['abstract.js'][527] = 0;
  _$jscoverage['abstract.js'][552] = 0;
  _$jscoverage['abstract.js'][553] = 0;
  _$jscoverage['abstract.js'][570] = 0;
  _$jscoverage['abstract.js'][571] = 0;
  _$jscoverage['abstract.js'][587] = 0;
  _$jscoverage['abstract.js'][588] = 0;
  _$jscoverage['abstract.js'][591] = 0;
  _$jscoverage['abstract.js'][594] = 0;
  _$jscoverage['abstract.js'][597] = 0;
  _$jscoverage['abstract.js'][599] = 0;
  _$jscoverage['abstract.js'][601] = 0;
  _$jscoverage['abstract.js'][615] = 0;
  _$jscoverage['abstract.js'][616] = 0;
  _$jscoverage['abstract.js'][617] = 0;
  _$jscoverage['abstract.js'][619] = 0;
  _$jscoverage['abstract.js'][620] = 0;
}
_$jscoverage['abstract.js'][8]++;
function Abstract() {
  _$jscoverage['abstract.js'][11]++;
  if ("function" === typeof arguments[0]) {
    _$jscoverage['abstract.js'][12]++;
    return Abstract.createModel(arguments[0]);
  }
  _$jscoverage['abstract.js'][16]++;
  if ("object" === typeof arguments[0]) {
    _$jscoverage['abstract.js'][17]++;
    return Abstract.create(arguments[0], arguments[1]);
  }
  _$jscoverage['abstract.js'][21]++;
  return this;
}
_$jscoverage['abstract.js'][32]++;
Object.defineProperties(module.exports = Abstract, {get: {get: (function () {
  _$jscoverage['abstract.js'][43]++;
  return (function get() {
  _$jscoverage['abstract.js'][44]++;
  return require("object-settings").prototype? require("object-settings").prototype.get.apply(Abstract, arguments): Abstract.utility.noop();
});
}), configurable: true, enumerable: false}, set: {get: (function () {
  _$jscoverage['abstract.js'][61]++;
  return (function set() {
  _$jscoverage['abstract.js'][62]++;
  return require("object-settings").prototype? require("object-settings").prototype.set.apply(Abstract, arguments): Abstract.utility.noop();
});
}), configurable: true, enumerable: false}, mixin: {get: (function () {
  _$jscoverage['abstract.js'][74]++;
  return (function mixin(target) {
  _$jscoverage['abstract.js'][75]++;
  return Abstract.prototype.mixin(Abstract, target);
});
}), configurable: true, enumerable: false}, call: {get: (function () {
  _$jscoverage['abstract.js'][89]++;
  return (function call(target) {
  _$jscoverage['abstract.js'][90]++;
  return Abstract.prototype.mixin(target, target);
});
}), configurable: true, enumerable: false}, apply: {get: (function () {
  _$jscoverage['abstract.js'][105]++;
  return (function apply(target, arguments) {
  _$jscoverage['abstract.js'][106]++;
  return Abstract.prototype.mixin(target, target);
});
}), configurable: true, enumerable: false}, create: {value: (function create(proto, properties) {
  _$jscoverage['abstract.js'][121]++;
  var Model = Object.create(Abstract.prototype, {create: {value: (function create() {
}), enumerable: true, writable: true, configurable: true}});
  _$jscoverage['abstract.js'][133]++;
  return Model;
}), configurable: true, writable: false, enumerable: true}, engine: {value: (function engine(target, engine) {
  _$jscoverage['abstract.js'][150]++;
  if (target && ! engine) {
    _$jscoverage['abstract.js'][151]++;
    return target._engine;
  }
  _$jscoverage['abstract.js'][155]++;
  Object.defineProperty(target, "_engine", {value: engine, enumerable: false, writable: true, configurable: true});
  _$jscoverage['abstract.js'][162]++;
  return engine || undefined;
}), configurable: true, enumerable: true, writable: true}, createModel: {value: (function createModel(Model) {
  _$jscoverage['abstract.js'][184]++;
  if ("function" !== typeof Model) {
    _$jscoverage['abstract.js'][185]++;
    return new Error("Abstract.createModel() requires a callable method as the first argument.");
  }
  _$jscoverage['abstract.js'][189]++;
  if ("function" === typeof Model.create && model.create.name === "Instantiator") {
    _$jscoverage['abstract.js'][190]++;
    return Model.create;
  }
  _$jscoverage['abstract.js'][194]++;
  Abstract.defineProperties(Model, {use: Abstract.prototype.use.bind(Model), get: Abstract.prototype.get.bind(Model), set: Abstract.prototype.set.bind(Model), properties: Abstract.prototype.properties.bind(Model), engine: Abstract.engine.bind(Model, Model), defineInstance: Abstract.defineInstance.bind(Model, Model), defineProperties: Abstract.defineProperties.bind(Model, Model), defineProperty: Abstract.defineProperty.bind(Model, Model)});
  _$jscoverage['abstract.js'][206]++;
  Model.prototype = Object.create(Abstract.prototype);
  _$jscoverage['abstract.js'][209]++;
  Model.call(Model, Model, Model.prototype);
  _$jscoverage['abstract.js'][217]++;
  Model.create = (function Instantiator() {
  _$jscoverage['abstract.js'][220]++;
  var Instance = Object.create(Model.prototype);
  _$jscoverage['abstract.js'][224]++;
  for (var key in Model.__proto__) {
    _$jscoverage['abstract.js'][227]++;
    var is_enumerable = Model.__proto__.propertyIsEnumerable(key);
    _$jscoverage['abstract.js'][229]++;
    Object.defineProperty(Instance, key, {value: Model.__proto__[key], enumerable: is_enumerable, writable: true, configurable: true});
}
  _$jscoverage['abstract.js'][238]++;
  Instance.set({id: Abstract.utility.hash(null, {random: true}), model: Model.name || "Model", schema: {id: Instance.get("id"), type: "object", properties: {}}});
  _$jscoverage['abstract.js'][249]++;
  if (this.instantiator && Object.keys(this.instantiator).length) {
    _$jscoverage['abstract.js'][250]++;
    this.instantiator.forEach((function (fn) {
  _$jscoverage['abstract.js'][250]++;
  fn.apply(Instance, arguments);
}));
  }
  _$jscoverage['abstract.js'][253]++;
  return Instance;
});
  _$jscoverage['abstract.js'][258]++;
  return Model;
}), configurable: true, enumerable: true, writable: true}, copyProperties: {value: (function referenceProperties(target, source) {
  _$jscoverage['abstract.js'][275]++;
  Object.getOwnPropertyNames(source).forEach((function (key) {
  _$jscoverage['abstract.js'][276]++;
  var descriptor = Object.getOwnPropertyDescriptor(source, key);
  _$jscoverage['abstract.js'][278]++;
  if (descriptor.enumerable) {
    _$jscoverage['abstract.js'][279]++;
    Object.defineProperty(target, key, {enumerable: true, value: source[key], writable: descriptor.writable, configurable: descriptor.configurable});
  }
}));
  _$jscoverage['abstract.js'][289]++;
  return target;
}), configurable: true, enumerable: false, writable: true}, defineInstance: {value: (function defineInstance(target, fn) {
  _$jscoverage['abstract.js'][304]++;
  if (target.instantiator && Object.keys(target.instantiator).length) {
    _$jscoverage['abstract.js'][305]++;
    target.instantiator.push("function" === typeof fn? fn: Abstract.utility.noop);
    _$jscoverage['abstract.js'][306]++;
    return target;
  }
  _$jscoverage['abstract.js'][309]++;
  return Object.defineProperty(target, "instantiator", {value: ["function" === typeof fn? fn: Abstract.utility.noop], configurable: true, enumerable: true, writable: true});
}), configurable: true, enumerable: false, writable: true}, defineProperties: {value: (function defineProperties(target, props) {
  _$jscoverage['abstract.js'][330]++;
  Object.keys(props).forEach((function (key) {
  _$jscoverage['abstract.js'][330]++;
  Abstract.defineProperty(target, key, props[key]);
}));
  _$jscoverage['abstract.js'][331]++;
  return target;
}), configurable: true, enumerable: true, writable: true}, defineProperty: {value: (function defineProperty(obj, key, prop) {
  _$jscoverage['abstract.js'][348]++;
  if (! prop) {
    _$jscoverage['abstract.js'][349]++;
    prop = {};
  }
  _$jscoverage['abstract.js'][352]++;
  if (! obj) {
    _$jscoverage['abstract.js'][353]++;
    obj = {};
  }
  _$jscoverage['abstract.js'][357]++;
  if ("object" !== typeof prop || (! prop.get && ! prop.set && ! prop.value)) {
    _$jscoverage['abstract.js'][359]++;
    if (prop.value) {
      _$jscoverage['abstract.js'][359]++;
      prop = prop.value;
    }
    _$jscoverage['abstract.js'][361]++;
    prop = {value: prop, configurable: true, writable: true, type: typeof prop, enumerable: true};
  }
  _$jscoverage['abstract.js'][372]++;
  Abstract.utility.extend(prop, this.meta? this.meta.get("defaults"): {});
  _$jscoverage['abstract.js'][375]++;
  Object.defineProperty(obj, key, prop);
  _$jscoverage['abstract.js'][377]++;
  if (obj._meta && obj._meta.schema) {
    _$jscoverage['abstract.js'][378]++;
    obj._meta.schema[key] = prop;
  }
  _$jscoverage['abstract.js'][382]++;
  if (key === "constructor") {
  }
  _$jscoverage['abstract.js'][385]++;
  if (key === "prototype") {
  }
  _$jscoverage['abstract.js'][388]++;
  if (key === "__proto__") {
  }
  _$jscoverage['abstract.js'][391]++;
  if (prop.hasOwnProperty("watch")) {
  }
  _$jscoverage['abstract.js'][396]++;
  if (prop.hasOwnProperty("wrap")) {
  }
  _$jscoverage['abstract.js'][401]++;
  if (prop.hasOwnProperty("properties")) {
    _$jscoverage['abstract.js'][402]++;
    Abstract.utility.each(prop.properties, (function (fn, key, array) {
  _$jscoverage['abstract.js'][403]++;
  if ("function" === typeof prop.value) {
    _$jscoverage['abstract.js'][404]++;
    Object.defineProperty(prop.value, key, {value: fn, configurable: true, enumerable: true});
  }
}));
  }
  _$jscoverage['abstract.js'][414]++;
  return obj;
}), configurable: true, enumerable: true}, addPrototype: {get: (function () {
  _$jscoverage['abstract.js'][427]++;
  return (function (context, proto) {
  _$jscoverage['abstract.js'][428]++;
  return Abstract.prototype.use.call(context, proto);
});
}), configurable: false, enumerable: false}, extendPrototype: {value: (function extendPrototype() {
  _$jscoverage['abstract.js'][441]++;
  var result = {};
  _$jscoverage['abstract.js'][442]++;
  var list = arguments;
  _$jscoverage['abstract.js'][444]++;
  Object.keys(arguments).forEach((function (index) {
  _$jscoverage['abstract.js'][448]++;
  if (index == 0) {
    _$jscoverage['abstract.js'][449]++;
    result.__proto__ = list[index];
  }
  else {
    _$jscoverage['abstract.js'][451]++;
    var depth = result;
    _$jscoverage['abstract.js'][453]++;
    for (i = 1; i <= index; i++) {
      _$jscoverage['abstract.js'][454]++;
      depth = depth.__proto__;
}
    _$jscoverage['abstract.js'][457]++;
    depth.__proto__ = list[index];
  }
}));
  _$jscoverage['abstract.js'][464]++;
  return Abstract.getPrototypeOf(result);
}), configurable: false, enumerable: false, writable: true}, getPrototypeOf: {value: (function getPrototypeOf(obj) {
  _$jscoverage['abstract.js'][478]++;
  if (Object.getPrototypeOf) {
    _$jscoverage['abstract.js'][479]++;
    return Object.getPrototypeOf(obj) || undefined;
  }
  else {
    _$jscoverage['abstract.js'][480]++;
    if (obj.__proto__) {
      _$jscoverage['abstract.js'][481]++;
      return obj.__proto__ || undefined;
    }
    else {
      _$jscoverage['abstract.js'][482]++;
      if (obj.constructor.prototype) {
        _$jscoverage['abstract.js'][483]++;
        return constructor.prototype || undefined;
      }
      else {
        _$jscoverage['abstract.js'][485]++;
        return undefined;
      }
    }
  }
}), configurable: true, enumerable: false, writable: true}, setPrototypeOf: {value: (function setPrototypeOf(obj, proto) {
  _$jscoverage['abstract.js'][500]++;
  if (Object.setPrototypeOf) {
    _$jscoverage['abstract.js'][501]++;
    Object.setPrototypeOf(obj, proto);
  }
  else {
    _$jscoverage['abstract.js'][502]++;
    if (obj.__proto__) {
      _$jscoverage['abstract.js'][503]++;
      obj.__proto__ = obj;
    }
  }
  _$jscoverage['abstract.js'][505]++;
  return obj;
}), configurable: true, enumerable: false, writable: true}, utility: {value: require("./utility"), configurable: true, enumerable: false, writable: true}});
_$jscoverage['abstract.js'][527]++;
Object.defineProperties(Abstract.prototype, {mixin: {value: require("./utility").mixin, configurable: true, writable: true, enumerable: false}, get: {get: (function () {
  _$jscoverage['abstract.js'][552]++;
  return (function get() {
  _$jscoverage['abstract.js'][553]++;
  return require("object-settings").prototype? require("object-settings").prototype.get.apply(this, arguments): Abstract.utility.noop();
});
}), configurable: true, enumerable: true}, set: {get: (function () {
  _$jscoverage['abstract.js'][570]++;
  return (function set() {
  _$jscoverage['abstract.js'][571]++;
  return require("object-settings").prototype? require("object-settings").prototype.set.apply(this, arguments): Abstract.utility.noop();
});
}), configurable: true, enumerable: true}, use: {value: (function use(source) {
  _$jscoverage['abstract.js'][587]++;
  if (! source) {
    _$jscoverage['abstract.js'][588]++;
    return this;
  }
  _$jscoverage['abstract.js'][591]++;
  try {
    _$jscoverage['abstract.js'][594]++;
    source.__proto__ = this.__proto__;
    _$jscoverage['abstract.js'][597]++;
    this.__proto__ = source;
  }
  catch (error) {
    _$jscoverage['abstract.js'][599]++;
    console.error(error.message);
  }
  _$jscoverage['abstract.js'][601]++;
  return this;
}), configurable: true, enumerable: true, writable: true}, properties: {get: (function () {
  _$jscoverage['abstract.js'][615]++;
  return (function properties(properties) {
  _$jscoverage['abstract.js'][616]++;
  if (arguments.length === 1) {
    _$jscoverage['abstract.js'][617]++;
    return Abstract.defineProperties(this, arguments[0]);
  }
  else {
    _$jscoverage['abstract.js'][619]++;
    arguments[0] = arguments[0] || {};
    _$jscoverage['abstract.js'][620]++;
    return Abstract.defineProperties(arguments[0], arguments[1]);
  }
});
}), configurable: true, enumerable: false}});
_$jscoverage['abstract.js'].source = ["/**"," * Create custom objects and methods by aggregating and abstracting esources."," *"," * @version 0.0.1"," * @class Abstract"," * @constractor"," */","function Abstract() {","","  // Create Model Builder context","  if( 'function' === typeof arguments[0] ) {","    return Abstract.createModel( arguments[0] );","  }","","  // Create Plain object","  if( 'object' === typeof arguments[0] ) {","    return Abstract.create( arguments[0], arguments[1] );","  }","","  // Return for context","  return this;","","}","","/**"," * Constructor Properties"," *"," * The following properties are available within the constructor factory or by"," * referencing the constructor."," *"," */","Object.defineProperties( module.exports = Abstract, {","  get: {","    /**","     * Get a key from current context's _meta","     *","     * @todo Migrate to use object-settings once Abstract core is ready.","     * @temp","     * @param key","     * @returns {string}","     */","    get: function() {","      return function get() {","        return require( 'object-settings' ).prototype ? require( 'object-settings' ).prototype.get.apply( Abstract, arguments ) : Abstract.utility.noop();","      }","    },","    configurable: true,","    enumerable: false","  },","  set: {","    /**","     * Set a key and value to current's context's _meta","     *","     * @todo Migrate to use object-settings once Abstract core is ready.","     * @temp","     * @param key","     * @param value","     * @returns {string}","     */","    get: function() {","      return function set() {","        return require( 'object-settings' ).prototype ? require( 'object-settings' ).prototype.set.apply( Abstract, arguments ) : Abstract.utility.noop();","      }","    },","    configurable: true,","    enumerable: false","  },","  mixin: {","    /**","     *","     * @returns {Function}","     */","    get: function() {","      return function mixin( target ) {","        return Abstract.prototype.mixin( Abstract, target );","      }","    },","    configurable: true,","    enumerable: false","  },","  call: {","    /**","     * Creates instance within a specified context.","     *","     * @params {Object} Target object to use as the context.","     * @returns {Function}","     */","    get: function() {","      return function call( target ) {","        return Abstract.prototype.mixin( target, target );","      }","    },","    configurable: true,","    enumerable: false","  },","  apply: {","    /**","     * Instantiate within a custom context.","     *","     * @params target {Object} Target object to use as the context.","     * @params arguments {Object} Arguments to instantiate with.","     * @returns {Function}","     */","    get: function() {","      return function apply( target, arguments ) {","        return Abstract.prototype.mixin( target, target );","      }","    },","    configurable: true,","    enumerable: false","  },","  create: {","    /**","     * Creates a new object with the specified prototype object and properties.","     * Copy the functions from the superclass prototype to the subclass prototype.","     *","     * @param proto {Object|null} Superclass to use as prototype for new object.","     */","    value: function create( proto, properties ) {","","      var Model = Object.create( Abstract.prototype, {","        create: {","          value: function create() {","","          },","          enumerable: true,","          writable: true,","          configurable: true","        }","      });","","      // Return for context","      return Model;","","    },","    configurable: true,","    writable: false,","    enumerable: true","  },","  engine: {","    /**","     * Set Model Engine","     *","     * @param target","     * @param engine","     */","    value: function engine( target, engine ) {","","      // Getting engine","      if( target &amp;&amp; !engine ) {","        return target._engine;","      }","","      // Setting engine","      Object.defineProperty( target, '_engine', {","        value: engine,","        enumerable: false,","        writable: true,","        configurable: true","      });","","      return engine || undefined;","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  createModel: {","    /**","     * Create Model Environment","     *","     * This method expects a function to be passed to be used as the Model Builder.","     * Within the context of the Model Builder new methods become available.","     *","     * Removed for now:","     * Abstract.copyProperties( Model.create, Model );","     * Abstract.addPrototype( Model.create, Model );","     *","     */","    value: function createModel( Model ) {","","      // Call Constructor, pass in some arguments maybe","      if( 'function' !== typeof Model ) {","        return new Error( 'Abstract.createModel() requires a callable method as the first argument.' );","      }","","      // If Instantiator already bound","      if( 'function' === typeof Model.create &amp;&amp; model.create.name === 'Instantiator' ) {","        return Model.create;","      }","","      // Create dynamically-created Model Constructor context","      Abstract.defineProperties( Model, {","        use: Abstract.prototype.use.bind( Model ),","        get: Abstract.prototype.get.bind( Model ),","        set: Abstract.prototype.set.bind( Model ),","        properties: Abstract.prototype.properties.bind( Model ),","        engine: Abstract.engine.bind( Model, Model ),","        defineInstance: Abstract.defineInstance.bind( Model, Model ),","        defineProperties: Abstract.defineProperties.bind( Model, Model ),","        defineProperty: Abstract.defineProperty.bind( Model, Model )","      });","","      // Create Instance Prototype from Abstract Prototype","      Model.prototype = Object.create( Abstract.prototype );","","      // Run Builder in Model context","      Model.call( Model, Model, Model.prototype );","","      /**","       * Constructed constructor","       *","       * This is the method that is ran when a new instance is created.","       *","       */","      Model.create = function Instantiator() {","","        // Create the instance","        var Instance = Object.create( Model.prototype );","","        // Not very elegant... @todo Revise prototype chain logic if this causes issues.","","        for( var key in Model.__proto__ ) {","","          // @todo This does not work.","          var is_enumerable = Model.__proto__.propertyIsEnumerable( key );","","          Object.defineProperty( Instance, key, {","            value: Model.__proto__[key],","            enumerable: is_enumerable,","            writable: true,","            configurable: true","          });","        }","","        // Set instance ID and Schema scaffolding","        Instance.set({","          id: Abstract.utility.hash( null, { random: true }),","          model: Model.name || 'Model',","          schema: {","            id: Instance.get( 'id' ),","            type: 'object',","            properties: {}","          }","        });","","        // Call Instantiator","        if( this.instantiator &amp;&amp; Object.keys( this.instantiator ).length ) {","          this.instantiator.forEach( function( fn ) { fn.apply( Instance, arguments ); });","        }","","        return Instance;","","      };","","      // Return constructor function","      return Model;","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  copyProperties: {","    /**","     * Iterate through target's properties and reference them into the source object","     *","     * @param target {Object}","     * @param source {Object}","     * @returns {Object} Target object.","     */","    value: function referenceProperties( target, source ) {","","      Object.getOwnPropertyNames( source ).forEach( function( key ) {","        var descriptor = Object.getOwnPropertyDescriptor( source, key );","","        if( descriptor.enumerable ) {","          Object.defineProperty( target, key, {","            enumerable: true,","            value: source[ key ],","            writable: descriptor.writable,","            configurable: descriptor.configurable","          });","        }","","      });","","      return target;","","    },","    configurable: true,","    enumerable: false,","    writable: true","  },","  defineInstance: {","    /**","     * Bind Instantiator to Context","     *","     * @param fn","     */","    value: function defineInstance( target, fn ) {","","      if( target.instantiator &amp;&amp; Object.keys( target.instantiator ).length ) {","        target.instantiator.push( 'function' === typeof fn ? fn : Abstract.utility.noop );","        return target;","      }","","      return Object.defineProperty( target, 'instantiator', {","        value: [ 'function' === typeof fn ? fn : Abstract.utility.noop ],","        configurable: true,","        enumerable: true,","        writable: true","      });","","    },","    configurable: true,","    enumerable: false,","    writable: true","  },","  defineProperties: {","    /**","     * Configure multiple object properties.","     *","     * @param obj","     * @param props","     * @returns {*}","     */","    value: function defineProperties( target, props ) {","      Object.keys( props ).forEach( function( key ) { Abstract.defineProperty( target, key, props[ key ] ); });","      return target;","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  defineProperty: {","    /**","     * Configure single object property.","     *","     * @param obj","     * @param key","     * @param prop","     * @returns {*}","     */","    value: function defineProperty( obj, key, prop ) {","","      if( !prop ) {","        prop = {};","      }","","      if( !obj ) {","        obj = {};","      }","","      // General Descriptors for basic data","      if( 'object' !== typeof prop || ( !prop.get &amp;&amp; !prop.set &amp;&amp; !prop.value ) ) {","","        if( prop.value ) { prop = prop.value; }","","        prop = {","          value: prop,","          configurable: true,","          writable: true,","          type: typeof prop,","          enumerable: true","        }","","      }","","      // Apply Defaults","      Abstract.utility.extend( prop, this.meta ? this.meta.get( 'defaults' ) : {} );","","      // Store in Schema and add to Object actual","      Object.defineProperty( obj, key, prop );","","      if( obj._meta &amp;&amp; obj._meta.schema ) {","        obj._meta.schema[ key ] = prop;","      }","","      // Handle constructor property","      if( key === 'constructor' ) {}","","      // Handle prototypal properties","      if( key === 'prototype' ) {}","","      // Handle __proto__ property","      if( key === '__proto__' ) {}","","      // Monitor a Property.","      if( prop.hasOwnProperty( 'watch' ) ) {","        // Abstract.utility.watch( prop, this.watcher ); // @todo Not sure which function to pipeline to.","      }","","      // Wrap the property into a getter and setter","      if( prop.hasOwnProperty( 'wrap' ) ) {","        // @todo","      }","","        // Add Properties to (presumably) constructor.","      if( prop.hasOwnProperty( 'properties' ) ) {","        Abstract.utility.each( prop.properties, function( fn, key, array ) {","          if( 'function' === typeof prop.value ) {","            Object.defineProperty( prop.value, key, {","              value: fn,","              configurable: true,","              enumerable: true","            });","            //Abstract.use( fn, obj );","          }","        });","      }","","      return obj;","","    },","    configurable: true,","    enumerable: true","  },","  addPrototype: {","    /**","     * Allow Prototype useage method to be ran in custom context for static calls","     *","     * @returns {Function}","     */","    get: function() {","      return function( context, proto ) {","        return Abstract.prototype.use.call( context, proto );","      }","    },","    configurable: false,","    enumerable: false","  },","  extendPrototype: {","    /**","     * Allow Prototype useage method to be ran in custom context for static calls","     *","     * @returns {Function}","     */","    value: function extendPrototype() {","      var result = {};","      var list = arguments;","","      Object.keys( arguments ).forEach( function( index ) {","        //Abstract.utility.extend( result, list[index] );","        //Abstract.utility.extend( result, Object.create( list[index] ) );","","        if( index == 0 ) {","          result.__proto__ = list[index];","        } else {","          var depth = result;","","          for( i=1; i&lt;=index; i++ ) {","            depth = depth.__proto__;","          }","","          depth.__proto__ = list[index];","","        }","","      });","","      // Get immediate prototype","      return Abstract.getPrototypeOf( result );","","    },","    configurable: false,","    enumerable: false,","    writable: true","  },","  getPrototypeOf: {","    /**","     * Cross Browser Compatible prototype getter.","     *","     * @param obj","     */","    value: function getPrototypeOf( obj ) {","      if( Object.getPrototypeOf ) {","        return Object.getPrototypeOf( obj ) || undefined;","      } else if( obj.__proto__ ) {","        return obj.__proto__ || undefined;","      } else if( obj.constructor.prototype ) {","        return constructor.prototype || undefined;","      } else {","        return undefined;","      }","    },","    configurable: true,","    enumerable: false,","    writable: true","  },","  setPrototypeOf: {","    /**","     * Basic Wrapper - will be more fault-tolerant in future.","     *","     * @param obj","     * @param proto","     */","    value: function setPrototypeOf( obj, proto ) {","      if( Object.setPrototypeOf ) {","        Object.setPrototypeOf( obj, proto );","      } else if( obj.__proto__ ) {","        obj.__proto__ = obj;","      }","      return obj;","    },","    configurable: true,","    enumerable: false,","    writable: true","  },","  utility: {","    value: require( './utility' ),","    configurable: true,","    enumerable: false,","    writable: true","  }","});","","/**"," * Instance Properties"," *"," * The follow properties are available to each instance created from a constructor."," * Some of the Abstract Static methods reference the prototypal methods."," * Prototyal methods all work with the existing context."," *"," */","Object.defineProperties( Abstract.prototype, {","  mixin: {","    /**","     * Mixin current prototype into target object","     *","     * Honors property descriptor settings, if available.","     *","     * @param target","     * @param source","     */","    value: require( './utility' ).mixin,","    configurable: true,","    writable: true,","    enumerable: false","  },","  get: {","    /**","     * Get a key from current context's _meta","     *","     * @todo Migrate to use object-settings once Abstract core is ready.","     * @temp","     * @param key","     * @returns {string}","     */","    get: function() {","      return function get() {","        return require( 'object-settings' ).prototype ? require( 'object-settings' ).prototype.get.apply( this, arguments ) : Abstract.utility.noop();","      }","    },","    configurable: true,","    enumerable: true","  },","  set: {","    /**","     * Set a key and value to current's context's _meta","     *","     * @todo Migrate to use object-settings once Abstract core is ready.","     * @temp","     * @param key","     * @param value","     * @returns {string}","     */","    get: function() {","      return function set( ) {","        return require( 'object-settings' ).prototype ? require( 'object-settings' ).prototype.set.apply( this, arguments ) : Abstract.utility.noop();","      }","    },","    configurable: true,","    enumerable: true","  },","  use: {","    /**","     * Inserts an object/prototype into a target object.","     *","     * @param target","     * @param proto","     * @returns {*}","     */","    value: function use( source ) {","","      if( !source ) {","        return this;","      }","","      try {","","        // Move current immediate prototype object into new protototype object","        source.__proto__ = this.__proto__;","","        // Insert new prototype into chain.","        this.__proto__ = source;","","      } catch( error ) { console.error( error.message ); }","","      return this;","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  properties: {","    /**","     * Get / Set Properties","     *","     * @returns {Function}","     */","    get: function() {","      return function properties( properties ) {","        if( arguments.length === 1 ) {","          return Abstract.defineProperties( this, arguments[0] );","        } else {","          arguments[0] = arguments[0] || {};","          return Abstract.defineProperties( arguments[0], arguments[1] );","        }","      }","    },","    configurable: true,","    enumerable: false","  }","});","","",""];
