/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['utility.js']) {
  _$jscoverage['utility.js'] = [];
  _$jscoverage['utility.js'][7] = 0;
  _$jscoverage['utility.js'][38] = 0;
  _$jscoverage['utility.js'][39] = 0;
  _$jscoverage['utility.js'][43] = 0;
  _$jscoverage['utility.js'][46] = 0;
  _$jscoverage['utility.js'][68] = 0;
  _$jscoverage['utility.js'][69] = 0;
  _$jscoverage['utility.js'][70] = 0;
  _$jscoverage['utility.js'][73] = 0;
  _$jscoverage['utility.js'][74] = 0;
  _$jscoverage['utility.js'][77] = 0;
  _$jscoverage['utility.js'][79] = 0;
  _$jscoverage['utility.js'][82] = 0;
  _$jscoverage['utility.js'][83] = 0;
  _$jscoverage['utility.js'][106] = 0;
  _$jscoverage['utility.js'][107] = 0;
  _$jscoverage['utility.js'][110] = 0;
  _$jscoverage['utility.js'][111] = 0;
  _$jscoverage['utility.js'][114] = 0;
  _$jscoverage['utility.js'][116] = 0;
  _$jscoverage['utility.js'][145] = 0;
  _$jscoverage['utility.js'][146] = 0;
  _$jscoverage['utility.js'][148] = 0;
  _$jscoverage['utility.js'][149] = 0;
  _$jscoverage['utility.js'][151] = 0;
  _$jscoverage['utility.js'][155] = 0;
  _$jscoverage['utility.js'][172] = 0;
  _$jscoverage['utility.js'][173] = 0;
  _$jscoverage['utility.js'][176] = 0;
  _$jscoverage['utility.js'][180] = 0;
  _$jscoverage['utility.js'][181] = 0;
  _$jscoverage['utility.js'][182] = 0;
  _$jscoverage['utility.js'][186] = 0;
  _$jscoverage['utility.js'][205] = 0;
  _$jscoverage['utility.js'][206] = 0;
  _$jscoverage['utility.js'][207] = 0;
  _$jscoverage['utility.js'][208] = 0;
  _$jscoverage['utility.js'][209] = 0;
  _$jscoverage['utility.js'][211] = 0;
  _$jscoverage['utility.js'][212] = 0;
  _$jscoverage['utility.js'][213] = 0;
  _$jscoverage['utility.js'][215] = 0;
  _$jscoverage['utility.js'][216] = 0;
  _$jscoverage['utility.js'][219] = 0;
  _$jscoverage['utility.js'][223] = 0;
  _$jscoverage['utility.js'][239] = 0;
  _$jscoverage['utility.js'][240] = 0;
  _$jscoverage['utility.js'][244] = 0;
  _$jscoverage['utility.js'][245] = 0;
  _$jscoverage['utility.js'][248] = 0;
  _$jscoverage['utility.js'][259] = 0;
  _$jscoverage['utility.js'][260] = 0;
  _$jscoverage['utility.js'][261] = 0;
  _$jscoverage['utility.js'][264] = 0;
  _$jscoverage['utility.js'][265] = 0;
  _$jscoverage['utility.js'][266] = 0;
  _$jscoverage['utility.js'][267] = 0;
  _$jscoverage['utility.js'][272] = 0;
  _$jscoverage['utility.js'][275] = 0;
  _$jscoverage['utility.js'][291] = 0;
  _$jscoverage['utility.js'][293] = 0;
  _$jscoverage['utility.js'][315] = 0;
  _$jscoverage['utility.js'][316] = 0;
  _$jscoverage['utility.js'][318] = 0;
  _$jscoverage['utility.js'][319] = 0;
  _$jscoverage['utility.js'][321] = 0;
  _$jscoverage['utility.js'][323] = 0;
  _$jscoverage['utility.js'][325] = 0;
  _$jscoverage['utility.js'][346] = 0;
  _$jscoverage['utility.js'][347] = 0;
  _$jscoverage['utility.js'][350] = 0;
  _$jscoverage['utility.js'][351] = 0;
  _$jscoverage['utility.js'][372] = 0;
  _$jscoverage['utility.js'][374] = 0;
  _$jscoverage['utility.js'][375] = 0;
  _$jscoverage['utility.js'][376] = 0;
  _$jscoverage['utility.js'][377] = 0;
  _$jscoverage['utility.js'][380] = 0;
  _$jscoverage['utility.js'][382] = 0;
  _$jscoverage['utility.js'][384] = 0;
  _$jscoverage['utility.js'][386] = 0;
  _$jscoverage['utility.js'][406] = 0;
  _$jscoverage['utility.js'][408] = 0;
  _$jscoverage['utility.js'][409] = 0;
  _$jscoverage['utility.js'][410] = 0;
  _$jscoverage['utility.js'][413] = 0;
  _$jscoverage['utility.js'][415] = 0;
  _$jscoverage['utility.js'][417] = 0;
  _$jscoverage['utility.js'][442] = 0;
  _$jscoverage['utility.js'][443] = 0;
  _$jscoverage['utility.js'][444] = 0;
  _$jscoverage['utility.js'][449] = 0;
  _$jscoverage['utility.js'][450] = 0;
  _$jscoverage['utility.js'][452] = 0;
  _$jscoverage['utility.js'][455] = 0;
  _$jscoverage['utility.js'][495] = 0;
  _$jscoverage['utility.js'][498] = 0;
  _$jscoverage['utility.js'][499] = 0;
  _$jscoverage['utility.js'][502] = 0;
  _$jscoverage['utility.js'][504] = 0;
  _$jscoverage['utility.js'][506] = 0;
  _$jscoverage['utility.js'][508] = 0;
  _$jscoverage['utility.js'][509] = 0;
  _$jscoverage['utility.js'][511] = 0;
  _$jscoverage['utility.js'][516] = 0;
  _$jscoverage['utility.js'][518] = 0;
}
_$jscoverage['utility.js'][7]++;
var Utility = Object.defineProperties(module.exports, {noop: {value: (function noop() {
}), configurable: false, enumerable: true, writable: true}, apply: {value: require("async").apply, configurable: true, enumerable: true, writable: true}, defaults: {value: (function defaults(target, defaults) {
  _$jscoverage['utility.js'][38]++;
  if (! target && ! defaults) {
    _$jscoverage['utility.js'][39]++;
    return ({});
  }
  _$jscoverage['utility.js'][43]++;
  target = Object.keys(target || {}).length? target: {};
  _$jscoverage['utility.js'][46]++;
  return require("lodash").defaults.apply({}, arguments);
}), configurable: true, enumerable: true, writable: true}, watch: {value: (function watch(prop, handler) {
  _$jscoverage['utility.js'][68]++;
  var oldval = this[prop];
  _$jscoverage['utility.js'][69]++;
  var newval = oldval;
  _$jscoverage['utility.js'][70]++;
  var description = Object.getOwnPropertyDescriptor(this, prop);
  _$jscoverage['utility.js'][73]++;
  if (description.configurable === false || ! (delete this[prop])) {
    _$jscoverage['utility.js'][74]++;
    return this;
  }
  _$jscoverage['utility.js'][77]++;
  return Object.defineProperty(this, prop, {get: (function get() {
  _$jscoverage['utility.js'][79]++;
  return newval;
}), set: (function set(val) {
  _$jscoverage['utility.js'][82]++;
  oldval = newval;
  _$jscoverage['utility.js'][83]++;
  return newval = handler.call(this, prop, oldval, val);
}), enumerable: description.enumerable, configurable: true});
}), configurable: true, enumerable: true, writable: true}, unwatch: {value: (function unwatch(prop) {
  _$jscoverage['utility.js'][106]++;
  var val = this[prop];
  _$jscoverage['utility.js'][107]++;
  var description = Object.getOwnPropertyDescriptor(this, prop);
  _$jscoverage['utility.js'][110]++;
  if (description.configurable === false || ! (delete this[prop])) {
    _$jscoverage['utility.js'][111]++;
    return this;
  }
  _$jscoverage['utility.js'][114]++;
  this[prop] = val;
  _$jscoverage['utility.js'][116]++;
  return this;
}), configurable: true, enumerable: true, writable: true}, extend: {value: (function extend(destination, source) {
  _$jscoverage['utility.js'][145]++;
  for (var property in source) {
    _$jscoverage['utility.js'][146]++;
    if (source[property] && source[property].constructor && source[property].constructor === Object) {
      _$jscoverage['utility.js'][148]++;
      destination[property] = destination[property] || {};
      _$jscoverage['utility.js'][149]++;
      arguments.callee(destination[property], source[property]);
    }
    else {
      _$jscoverage['utility.js'][151]++;
      destination[property] = source[property];
    }
}
  _$jscoverage['utility.js'][155]++;
  return destination;
}), configurable: true, enumerable: true, writable: true}, query: {value: (function query(obj, str) {
  _$jscoverage['utility.js'][172]++;
  if (! str) {
    _$jscoverage['utility.js'][173]++;
    return obj;
  }
  _$jscoverage['utility.js'][176]++;
  if ("object" === typeof str) {
  }
  _$jscoverage['utility.js'][180]++;
  try {
    _$jscoverage['utility.js'][181]++;
    return str.split(".").reduce((function (o, x) {
  _$jscoverage['utility.js'][182]++;
  return o[x];
}), obj);
  }
  catch (error) {
    _$jscoverage['utility.js'][186]++;
    return null;
  }
}), configurable: true, enumerable: true, writable: true}, unwrap: {value: (function unwrap(string, value, hash, seperator) {
  _$jscoverage['utility.js'][205]++;
  if (hash == null) {
    _$jscoverage['utility.js'][205]++;
    hash = {};
  }
  _$jscoverage['utility.js'][206]++;
  if (seperator == null) {
    _$jscoverage['utility.js'][206]++;
    seperator = ".";
  }
  _$jscoverage['utility.js'][207]++;
  var parts = string.split(seperator);
  _$jscoverage['utility.js'][208]++;
  var refHash = hash;
  _$jscoverage['utility.js'][209]++;
  var depth = 0;
  _$jscoverage['utility.js'][211]++;
  parts.forEach((function (part) {
  _$jscoverage['utility.js'][212]++;
  if (depth == parts.length - 1) {
    _$jscoverage['utility.js'][213]++;
    refHash[part] = value;
  }
  else {
    _$jscoverage['utility.js'][215]++;
    if (refHash[part] == null) {
      _$jscoverage['utility.js'][215]++;
      refHash[part] = {};
    }
    _$jscoverage['utility.js'][216]++;
    refHash = refHash[part];
  }
  _$jscoverage['utility.js'][219]++;
  depth++;
}));
  _$jscoverage['utility.js'][223]++;
  return hash;
}), configurable: true, enumerable: true, writable: true}, inherit: {value: (function inherit(target, source) {
  _$jscoverage['utility.js'][239]++;
  target = target || {};
  _$jscoverage['utility.js'][240]++;
  source = source || {};
  _$jscoverage['utility.js'][244]++;
  Object.getOwnPropertyNames(source).forEach((function (key) {
  _$jscoverage['utility.js'][245]++;
  if (! target.hasOwnProperty(key)) {
    _$jscoverage['utility.js'][245]++;
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }
}));
  _$jscoverage['utility.js'][248]++;
  return target;
}), enumerable: true}, flatten: {value: (function flatten(data, options) {
  _$jscoverage['utility.js'][259]++;
  data = data || [];
  _$jscoverage['utility.js'][260]++;
  options = options || {delimiter: "."};
  _$jscoverage['utility.js'][261]++;
  var result = [];
  _$jscoverage['utility.js'][264]++;
  if (data instanceof Array) {
    _$jscoverage['utility.js'][265]++;
    data.forEach((function (value) {
  _$jscoverage['utility.js'][266]++;
  if ("string" === typeof value || "number" === typeof value) {
    _$jscoverage['utility.js'][267]++;
    result.push(value);
  }
}));
  }
  _$jscoverage['utility.js'][272]++;
  result = result.join(options.delimiter);
  _$jscoverage['utility.js'][275]++;
  return result.toLowerCase();
}), enumerable: true}, inherit_full: {value: (function inherit_prototype(target, constructor) {
  _$jscoverage['utility.js'][291]++;
  target.super_ = constructor;
  _$jscoverage['utility.js'][293]++;
  target.prototype = Object.create(constructor.prototype, {constructor: {value: constructor, enumerable: false, writable: true, configurable: true}});
}), configurable: true, enumerable: true, writable: true}, get_constructors: {value: (function get_constructors(context, options) {
  _$jscoverage['utility.js'][315]++;
  context = context || {};
  _$jscoverage['utility.js'][316]++;
  options = options || {};
  _$jscoverage['utility.js'][318]++;
  var matches = {};
  _$jscoverage['utility.js'][319]++;
  var path = [];
  _$jscoverage['utility.js'][321]++;
  do {
    _$jscoverage['utility.js'][323]++;
    path.push(context.constructor.name);
    _$jscoverage['utility.js'][325]++;
    Object.defineProperty(matches, context.constructor.name, {enumerable: true, writable: true, value: {name: context.constructor.name, properties: {constructor: {type: typeof context.constructor, properties: Object.getOwnPropertyNames(context.constructor)}, prototype: {type: typeof context.constructor.prototype, properties: Object.keys(context.constructor.prototype)}}}});
}
  while (context = Object.getPrototypeOf(context));
  _$jscoverage['utility.js'][346]++;
  if (options.format === "schema") {
    _$jscoverage['utility.js'][347]++;
    return matches || {};
  }
  _$jscoverage['utility.js'][350]++;
  if (options.delimiter) {
    _$jscoverage['utility.js'][351]++;
    return path.join(options.delimiter);
    _$jscoverage['utility.js'][351]++;
    ;
  }
}), configurable: true, enumerable: true, writable: true}, console_json: {value: (function console_json(data, depth) {
  _$jscoverage['utility.js'][372]++;
  try {
    _$jscoverage['utility.js'][374]++;
    if ("string" === typeof data && ("object" === typeof depth || "function" === typeof depth)) {
      _$jscoverage['utility.js'][375]++;
      console.log("\n" + "===============" + data + " Properties===============");
      _$jscoverage['utility.js'][376]++;
      data = depth;
      _$jscoverage['utility.js'][377]++;
      depth = arguments[2] || 1;
    }
    _$jscoverage['utility.js'][380]++;
    var output = require("util").inspect(data, false, "number" === typeof depth? (depth - 1): 1, true);
    _$jscoverage['utility.js'][382]++;
    console.log(output);
  }
  catch (error) {
    _$jscoverage['utility.js'][384]++;
    console.error("Error with console.json()", error);
  }
  _$jscoverage['utility.js'][386]++;
  return arguments[0];
}), configurable: true, enumerable: true, writable: true}, console_methods: {value: (function console_methods(data, object) {
  _$jscoverage['utility.js'][406]++;
  try {
    _$jscoverage['utility.js'][408]++;
    if ("string" === typeof data && ("object" === typeof object || "function" === typeof object)) {
      _$jscoverage['utility.js'][409]++;
      console.log("\n" + "===============" + data + " Methods===============");
      _$jscoverage['utility.js'][410]++;
      data = object;
    }
    _$jscoverage['utility.js'][413]++;
    module.exports.json(_.methods(data));
  }
  catch (error) {
    _$jscoverage['utility.js'][415]++;
    console.error("Error with console.methods()", error);
  }
  _$jscoverage['utility.js'][417]++;
  return arguments[0];
}), configurable: true, enumerable: true, writable: true}, generate_hash: {value: (function generate_hash(obj) {
  _$jscoverage['utility.js'][442]++;
  var result;
  _$jscoverage['utility.js'][443]++;
  var string = JSON.stringify(arguments[0] || {});
  _$jscoverage['utility.js'][444]++;
  var options = Utility.defaults(arguments[1], {type: "md5", silent_fail: true});
  _$jscoverage['utility.js'][449]++;
  try {
    _$jscoverage['utility.js'][450]++;
    result = require("crypto").createHash(options.type.toLowerCase()).update(string).digest("hex");
  }
  catch (error) {
    _$jscoverage['utility.js'][452]++;
    result = options.silent_fail? "": error;
  }
  _$jscoverage['utility.js'][455]++;
  return result;
}), configurable: true, enumerable: true, writable: true}, methods: {value: require("lodash").methods}, values: {value: require("lodash").values}, each: {value: require("lodash").each}, toArray: {value: require("lodash").toArray}, extend: {value: require("lodash").extend}, where: {value: require("lodash").where}, if: {value: {"PlainObject": require("lodash").isPlainObject, "Function": require("lodash").isFunction, "Object": require("lodash").isObject, "String": require("lodash").isString}, enumerable: true}, log: {value: Object.defineProperties((function () {
  _$jscoverage['utility.js'][495]++;
  var output = {};
  _$jscoverage['utility.js'][498]++;
  if (this.event) {
    _$jscoverage['utility.js'][499]++;
    output.event = this.event;
  }
  _$jscoverage['utility.js'][502]++;
  Utility.each(arguments, (function (item, key) {
  _$jscoverage['utility.js'][504]++;
  if (Utility["if"].PlainObject(item)) {
  }
  _$jscoverage['utility.js'][506]++;
  output.format = typeof item;
  _$jscoverage['utility.js'][508]++;
  if (key === 0) {
    _$jscoverage['utility.js'][509]++;
    output.data = item;
  }
  else {
    _$jscoverage['utility.js'][511]++;
    output[key] = item;
  }
}));
  _$jscoverage['utility.js'][516]++;
  console.log(require("util").inspect(output, Utility.log.config));
  _$jscoverage['utility.js'][518]++;
  return this;
}), {"config": {value: {"showHidden": true, "depth": 2, "colors": true}, "writable": true}}), enumerable: true}});
_$jscoverage['utility.js'].source = ["/**"," * Helper Utility for Abstract"," *"," * @author potanin@UD"," * @date 6/17/13"," */","var Utility = Object.defineProperties( module.exports, {","  noop: {","    /**","     * Not a function, that's for sure.","     * This method does not accept any arguments.","     */","    value: function noop() {},","    configurable: false,","    enumerable: true,","    writable: true","  },","  apply: {","    /**","     * Creates a continuation function with some arguments already applied.","     *","     * @uses async","     */","    value: require( 'async' ).apply,","    configurable: true,","    enumerable: true,","    writable: true","  },","  defaults: {","    /**","     * Configure Defaults for an Object","     *","     * @returns {Object}","     */","    value: function defaults( target, defaults ) {","","      // If no arguments, return empty object","      if( !target &amp;&amp; !defaults ) {","        return {};","      }","","      // Ensure target is an object","      target = Object.keys( target || {} ).length ? target : {};","","      // Lodash-it","      return require( 'lodash' ).defaults.apply( {}, arguments );","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  watch: {","    /**","     * Watch a Single Property","     *","     * @param {Object} prop","     * @param {callback} handler","     *","     * @method watch","     * @for ObjectExtender","     *","     * @chainable","     *","     * @return {Object} newval","     */","    value: function watch( prop, handler ) {","      var oldval = this[prop];","      var newval = oldval;","      var description = Object.getOwnPropertyDescriptor( this, prop );","","      // Delete original property and replace with getter/setter if possible","      if( description.configurable === false || !( delete this[ prop ] ) ) {","        return this;","      }","","      return Object.defineProperty( this, prop, {","        get: function get() {","          return newval;","        },","        set: function set( val ) {","          oldval = newval;","          return newval = handler.call( this, prop, oldval, val );","        },","        enumerable: description.enumerable,","        configurable: true","      });","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  unwatch: {","    /**","     * Unwatch a Single Property","     *","     * @param {Object} prop","     *","     * @method unwatch","     * @for ObjectExtender","     *","     * @return null","     */","    value: function unwatch( prop ) {","      var val = this[prop];","      var description = Object.getOwnPropertyDescriptor( this, prop );","","      // Shouldn't happen, but just in case.","      if( description.configurable === false || !( delete this[ prop ] ) ) {","        return this;","      }","","      this[prop] = val;","","      return this;","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  extend: {","    /**","     * Deep Merge Another Object into Current","     *","     * Can do it in two ways:","     * - with help of _.extend(). if exists","     * - or this.deepExtend, otherwise.","     *","     * @param {Object} arguments*","     *","     * @method extend","     * @for ObjectExtender","     *","     * @uses _.extend()","     * @uses Object.deepExtend()","     *","     * @chainable","     *","     * @return {Object}","     */","    value: function extend( destination, source ) {","","      for (var property in source) {","        if (source[property] &amp;&amp; source[property].constructor &amp;&amp;","          source[property].constructor === Object) {","          destination[property] = destination[property] || {};","          arguments.callee(destination[property], source[property]);","        } else {","          destination[property] = source[property];","        }","      }","","      return destination;","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  query: {","    /**","     * Get property value using a dot notation path.","     *","     * @param obj","     * @param str","     * @returns {*}","     */","    value: function query( obj, str ) {","","      if( !str ) {","        return obj;","      }","","      if( 'object' === typeof str ) {","        // @todo Convert Object to dot notation, using the first full dot notation path.","      }","","      try {","        return str.split( '.' ).reduce( function( o, x ) {","          return o[x]","        }, obj);","","      } catch( error ) {","        return null;","      }","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  unwrap: {","    /**","     * Unwrap dot notation string to nested Object","     *","     * @param string","     * @param value","     * @param hash","     * @param seperator","     * @return {*}","     */","    value: function unwrap( string, value, hash, seperator ) {","      if( hash == null ) { hash = {}; }","      if( seperator == null ) { seperator = '.'; }","      var parts = string.split( seperator );","      var refHash = hash;","      var depth = 0;","","      parts.forEach( function( part ) {","        if( depth == parts.length - 1 ) {","          refHash[part] = value;","        } else {","          if( refHash[part] == null ) { refHash[part] = {}; }","          refHash = refHash[part];","        }","","        depth++;","","      });","","      return hash;","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  inherit: {","    /**","     * Carefully Inherit Properties","     *","     * @param target {Object} Object to add properties to.","     * @param target {Object} Source object.","     * @returns {Object} Extended target.","     */","    value: function inherit( target, source ) {","      target = target || {};","      source = source || {};","","      //if( target instanceof source ) {}","","      Object.getOwnPropertyNames( source ).forEach( function( key ) {","        if( !target.hasOwnProperty( key ) ) { Object.defineProperty( target, key, Object.getOwnPropertyDescriptor( source, key ) ); }","      });","","      return target;","","    },","    enumerable: true","  },","  flatten: {","    /**","     * Flatten Array","     *","     */","    value: function flatten( data, options ) {","      data = data || [];","      options = options || { delimiter: '.' };","      var result = [];","","      // Flatten Channel Name with Delimiter","      if( data instanceof Array ) {","        data.forEach( function( value ) {","          if( 'string' === typeof value || 'number' === typeof value ) {","            result.push( value );","          }","        });","      }","","      result = result.join( options.delimiter );","","      // Lowercase","      return result.toLowerCase()","","    },","    enumerable: true","  },","  inherit_full: {","    /**","     * Inherit the prototype methods from one constructor into another.","     *","     * Copy of the Node.js util.inherits method.","     *","     * @param {function} target Constructor function which needs to inherit the prototype.","     * @param {function} constructor Constructor function to inherit prototype from.","     */","    value: function inherit_prototype( target, constructor ) {","","      target.super_ = constructor;","","      target.prototype = Object.create( constructor.prototype, {","        constructor: {","          value: constructor,","          enumerable: false,","          writable: true,","          configurable: true","        }","      });","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  get_constructors: {","    /**","     * Walk up the prototype chain, creating a JSON-Schema-esque structure","     *","     * @param context {Object} The object to walk through.","     * @return {Object} JSON Schema-esque constructor chain.","     */","    value: function get_constructors( context, options ) {","      context = context || {};","      options = options || {};","","      var matches = {};","      var path = [];","","      do {","","        path.push( context.constructor.name );","","        Object.defineProperty( matches, context.constructor.name, {","          enumerable: true,","          writable: true,","          value: {","            name: context.constructor.name,","            properties: {","              constructor: {","                type: typeof context.constructor,","                properties: Object.getOwnPropertyNames( context.constructor )","              },","              prototype: {","                type: typeof context.constructor.prototype,","                properties: Object.keys( context.constructor.prototype )","              }","            }","          }","        });","","      } while ( context = Object.getPrototypeOf( context ) );","","","      if( options.format === 'schema' ) {","        return matches || {};","      }","","      if( options.delimiter ) {","        return path.join( options.delimiter );;","      }","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  console_json: {","    /**","     * Prety Print complex objects","     *","     * @param data","     * @param depth","     *","     * @requires lodash","     * @method console_json","     * @return {Object} The first argument.","     */","    value: function console_json( data, depth ) {","","      try {","","        if( 'string' === typeof data &amp;&amp; ( 'object' === typeof depth || 'function' === typeof depth ) ) {","          console.log( \"\\n\" + '===============' + data + ' Properties===============' );","          data = depth;","          depth = arguments[2] || 1","        }","","        var output = require( 'util' ).inspect( data, false, 'number' === typeof depth ? ( depth - 1 ) : 1, true );","","        console.log( output );","","      } catch( error ) { console.error( 'Error with console.json()', error ); }","","      return arguments[0];","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  console_methods: {","    /**","     * Pretty Print and Object's Methods","     *","     * @param data","     * @param object","     *","     * @requires lodash","     * @method console_methods","     * @return {Object} The first argument.","     */","    value: function console_methods( data, object ) {","","      try {","","        if( 'string' === typeof data &amp;&amp; ( 'object' === typeof object || 'function' === typeof object ) ) {","          console.log( \"\\n\" + '===============' + data + ' Methods===============' );","          data = object;","        }","","        module.exports.json( _.methods( data ) );","","      } catch( error ) { console.error( 'Error with console.methods()', error ); }","","      return arguments[0];","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  generate_hash: {","    /**","     * Generate a unique hash for an Object, using md5 on default.","     *","     * @example","     *","     *    var _hash = Utility.generate_hash({ type: 'some_object', name: 'Bob'});","     *","     *    console.log( _hash ); // -&gt; 147ce3e2ccb7db6b928b303ce42bdafa","     *","     * @param obj {Object} Object to generate a hash for.","     * @param options {Object} options for hash generation.","     * @param options {String} options.type Type of hash to generate, defaulting to md5.","     * @param options {String} options.silent_fail Do not throw errors, return empty string if there was an error when true.","     *","     */","    value: function generate_hash( obj ) {","","      var result;","      var string = JSON.stringify( arguments[0] || {} );","      var options = Utility.defaults( arguments[1], {","        type: 'md5',","        silent_fail: true","      });","","      try {","        result = require( 'crypto' ).createHash( options.type.toLowerCase() ).update( string ).digest( 'hex' );","      } catch ( error ) {","        result = options.silent_fail ? '' : error;","      }","","      return result;","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  methods: { value: require( 'lodash' ).methods },","  values: { value: require( 'lodash' ).values },","  each: { value: require( 'lodash' ).each },","  toArray: { value: require( 'lodash' ).toArray },","  extend: { value: require( 'lodash' ).extend },","  where: { value: require( 'lodash' ).where },","  if: {","    value: {","      \"PlainObject\": require( 'lodash' ).isPlainObject,","      \"Function\": require( 'lodash' ).isFunction,","      \"Object\": require( 'lodash' ).isObject,","      \"String\": require( 'lodash' ).isString,","    },","    enumerable: true","  },","  log: {","    /**","     * Output variables to console log.","     *","     * Settings can be configured like so:","     *    abstract.log.config.depth = 2;","     *    abstract.log.config.colors = true;","     *","     * @param {Object|String} data A config object","     * @example","     *      Abstract.log( data )","     *","     * method log","     * @return {Object} Abstract constructor.","     * @chainable","     */","    value: Object.defineProperties( function() {","","      var output = {};","","      // Capture Event Name","      if( this.event ) {","        output.event = this.event;","      }","","      Utility.each( arguments, function( item, key ) {","","        if( Utility.if.PlainObject( item ) ) {}","","        output[ 'format' ] = typeof item;","","        if( key === 0 ) {","          output[ 'data' ] = item;","        } else {","          output[ key ] = item;","        }","","      });","","      console.log( require( 'util' ).inspect( output, ( Utility ).log.config ) );","","      return this;","    }, { \"config\": { value: { \"showHidden\": true, \"depth\": 2, \"colors\": true }, \"writable\": true } }),","    enumerable: true","  }","});"];
