/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['utility.js']) {
  _$jscoverage['utility.js'] = [];
  _$jscoverage['utility.js'][14] = 0;
  _$jscoverage['utility.js'][15] = 0;
  _$jscoverage['utility.js'][18] = 0;
  _$jscoverage['utility.js'][32] = 0;
  _$jscoverage['utility.js'][33] = 0;
  _$jscoverage['utility.js'][36] = 0;
  _$jscoverage['utility.js'][37] = 0;
  _$jscoverage['utility.js'][38] = 0;
  _$jscoverage['utility.js'][59] = 0;
  _$jscoverage['utility.js'][61] = 0;
  _$jscoverage['utility.js'][62] = 0;
  _$jscoverage['utility.js'][63] = 0;
  _$jscoverage['utility.js'][64] = 0;
  _$jscoverage['utility.js'][67] = 0;
  _$jscoverage['utility.js'][69] = 0;
  _$jscoverage['utility.js'][71] = 0;
  _$jscoverage['utility.js'][73] = 0;
  _$jscoverage['utility.js'][88] = 0;
  _$jscoverage['utility.js'][90] = 0;
  _$jscoverage['utility.js'][91] = 0;
  _$jscoverage['utility.js'][92] = 0;
  _$jscoverage['utility.js'][95] = 0;
  _$jscoverage['utility.js'][97] = 0;
  _$jscoverage['utility.js'][99] = 0;
  _$jscoverage['utility.js'][112] = 0;
  _$jscoverage['utility.js'][113] = 0;
  _$jscoverage['utility.js'][114] = 0;
  _$jscoverage['utility.js'][115] = 0;
  _$jscoverage['utility.js'][117] = 0;
  _$jscoverage['utility.js'][120] = 0;
  _$jscoverage['utility.js'][121] = 0;
  _$jscoverage['utility.js'][160] = 0;
  _$jscoverage['utility.js'][161] = 0;
  _$jscoverage['utility.js'][165] = 0;
  _$jscoverage['utility.js'][168] = 0;
  _$jscoverage['utility.js'][190] = 0;
  _$jscoverage['utility.js'][191] = 0;
  _$jscoverage['utility.js'][192] = 0;
  _$jscoverage['utility.js'][194] = 0;
  _$jscoverage['utility.js'][195] = 0;
  _$jscoverage['utility.js'][196] = 0;
  _$jscoverage['utility.js'][197] = 0;
  _$jscoverage['utility.js'][198] = 0;
  _$jscoverage['utility.js'][202] = 0;
  _$jscoverage['utility.js'][203] = 0;
  _$jscoverage['utility.js'][206] = 0;
  _$jscoverage['utility.js'][208] = 0;
  _$jscoverage['utility.js'][211] = 0;
  _$jscoverage['utility.js'][214] = 0;
  _$jscoverage['utility.js'][217] = 0;
  _$jscoverage['utility.js'][241] = 0;
  _$jscoverage['utility.js'][242] = 0;
  _$jscoverage['utility.js'][245] = 0;
  _$jscoverage['utility.js'][246] = 0;
  _$jscoverage['utility.js'][249] = 0;
  _$jscoverage['utility.js'][251] = 0;
  _$jscoverage['utility.js'][268] = 0;
  _$jscoverage['utility.js'][269] = 0;
  _$jscoverage['utility.js'][272] = 0;
  _$jscoverage['utility.js'][276] = 0;
  _$jscoverage['utility.js'][277] = 0;
  _$jscoverage['utility.js'][278] = 0;
  _$jscoverage['utility.js'][282] = 0;
  _$jscoverage['utility.js'][312] = 0;
  _$jscoverage['utility.js'][313] = 0;
  _$jscoverage['utility.js'][314] = 0;
  _$jscoverage['utility.js'][315] = 0;
  _$jscoverage['utility.js'][316] = 0;
  _$jscoverage['utility.js'][318] = 0;
  _$jscoverage['utility.js'][319] = 0;
  _$jscoverage['utility.js'][320] = 0;
  _$jscoverage['utility.js'][322] = 0;
  _$jscoverage['utility.js'][323] = 0;
  _$jscoverage['utility.js'][326] = 0;
  _$jscoverage['utility.js'][330] = 0;
  _$jscoverage['utility.js'][347] = 0;
  _$jscoverage['utility.js'][348] = 0;
  _$jscoverage['utility.js'][350] = 0;
  _$jscoverage['utility.js'][352] = 0;
  _$jscoverage['utility.js'][353] = 0;
  _$jscoverage['utility.js'][359] = 0;
  _$jscoverage['utility.js'][363] = 0;
  _$jscoverage['utility.js'][379] = 0;
  _$jscoverage['utility.js'][380] = 0;
  _$jscoverage['utility.js'][384] = 0;
  _$jscoverage['utility.js'][385] = 0;
  _$jscoverage['utility.js'][388] = 0;
  _$jscoverage['utility.js'][401] = 0;
  _$jscoverage['utility.js'][405] = 0;
  _$jscoverage['utility.js'][414] = 0;
  _$jscoverage['utility.js'][416] = 0;
  _$jscoverage['utility.js'][418] = 0;
  _$jscoverage['utility.js'][420] = 0;
  _$jscoverage['utility.js'][421] = 0;
  _$jscoverage['utility.js'][424] = 0;
  _$jscoverage['utility.js'][426] = 0;
  _$jscoverage['utility.js'][428] = 0;
  _$jscoverage['utility.js'][432] = 0;
  _$jscoverage['utility.js'][436] = 0;
  _$jscoverage['utility.js'][451] = 0;
  _$jscoverage['utility.js'][453] = 0;
  _$jscoverage['utility.js'][475] = 0;
  _$jscoverage['utility.js'][476] = 0;
  _$jscoverage['utility.js'][478] = 0;
  _$jscoverage['utility.js'][479] = 0;
  _$jscoverage['utility.js'][481] = 0;
  _$jscoverage['utility.js'][483] = 0;
  _$jscoverage['utility.js'][484] = 0;
  _$jscoverage['utility.js'][486] = 0;
  _$jscoverage['utility.js'][508] = 0;
  _$jscoverage['utility.js'][509] = 0;
  _$jscoverage['utility.js'][512] = 0;
  _$jscoverage['utility.js'][513] = 0;
  _$jscoverage['utility.js'][516] = 0;
  _$jscoverage['utility.js'][531] = 0;
  _$jscoverage['utility.js'][532] = 0;
  _$jscoverage['utility.js'][533] = 0;
  _$jscoverage['utility.js'][535] = 0;
  _$jscoverage['utility.js'][559] = 0;
  _$jscoverage['utility.js'][560] = 0;
  _$jscoverage['utility.js'][561] = 0;
  _$jscoverage['utility.js'][567] = 0;
  _$jscoverage['utility.js'][569] = 0;
  _$jscoverage['utility.js'][570] = 0;
  _$jscoverage['utility.js'][573] = 0;
  _$jscoverage['utility.js'][575] = 0;
  _$jscoverage['utility.js'][578] = 0;
  _$jscoverage['utility.js'][620] = 0;
  _$jscoverage['utility.js'][623] = 0;
  _$jscoverage['utility.js'][624] = 0;
  _$jscoverage['utility.js'][627] = 0;
  _$jscoverage['utility.js'][629] = 0;
  _$jscoverage['utility.js'][631] = 0;
  _$jscoverage['utility.js'][633] = 0;
  _$jscoverage['utility.js'][634] = 0;
  _$jscoverage['utility.js'][636] = 0;
  _$jscoverage['utility.js'][641] = 0;
  _$jscoverage['utility.js'][643] = 0;
}
_$jscoverage['utility.js'][14]++;
function Utility() {
  _$jscoverage['utility.js'][15]++;
  return Object.keys(arguments)? require("lodash").pick.apply(null, [Utility, Array.prototype.slice.call(arguments)]): Utility;
}
_$jscoverage['utility.js'][18]++;
Object.defineProperties(module.exports = Utility, {json: {value: {parse: (function (json) {
  _$jscoverage['utility.js'][32]++;
  if (Buffer && json instanceof Buffer) {
    _$jscoverage['utility.js'][33]++;
    json = json.toString();
  }
  _$jscoverage['utility.js'][36]++;
  var parsed = false;
  _$jscoverage['utility.js'][37]++;
  try {
    _$jscoverage['utility.js'][37]++;
    parsed = JSON.parse(json);
  }
  catch (e) {
    _$jscoverage['utility.js'][37]++;
    parsed = false;
  }
  _$jscoverage['utility.js'][38]++;
  return parsed? parsed: json;
})}, configurable: false, enumerable: true, writable: true}, console: {value: {json: (function json(data, depth) {
  _$jscoverage['utility.js'][59]++;
  try {
    _$jscoverage['utility.js'][61]++;
    if ("string" === typeof data && ("object" === typeof depth || "function" === typeof depth)) {
      _$jscoverage['utility.js'][62]++;
      console.log("\n" + "===============" + data + " Properties===============");
      _$jscoverage['utility.js'][63]++;
      data = depth;
      _$jscoverage['utility.js'][64]++;
      depth = arguments[2] || 1;
    }
    _$jscoverage['utility.js'][67]++;
    var output = require("util").inspect(data, false, "number" === typeof depth? (depth - 1): 1, true);
    _$jscoverage['utility.js'][69]++;
    console.log(output);
  }
  catch (error) {
    _$jscoverage['utility.js'][71]++;
    console.error("Error with console.json()", error);
  }
  _$jscoverage['utility.js'][73]++;
  return arguments[0];
}), method: (function method(data, object) {
  _$jscoverage['utility.js'][88]++;
  try {
    _$jscoverage['utility.js'][90]++;
    if ("string" === typeof data && ("object" === typeof object || "function" === typeof object)) {
      _$jscoverage['utility.js'][91]++;
      console.log("\n" + "===============" + data + " Methods===============");
      _$jscoverage['utility.js'][92]++;
      data = object;
    }
    _$jscoverage['utility.js'][95]++;
    module.exports.json(_.methods(data));
  }
  catch (error) {
    _$jscoverage['utility.js'][97]++;
    console.error("Error with console.methods()", error);
  }
  _$jscoverage['utility.js'][99]++;
  return arguments[0];
}), keys: (function keys(data) {
  _$jscoverage['utility.js'][112]++;
  function Iterate(target) {
    _$jscoverage['utility.js'][113]++;
    var result = [];
    _$jscoverage['utility.js'][114]++;
    for (var key in target) {
      _$jscoverage['utility.js'][115]++;
      result.push(key);
}
    _$jscoverage['utility.js'][117]++;
    return result;
}
  _$jscoverage['utility.js'][120]++;
  console.log([Object.keys(data) + Object.getOwnPropertyNames(data) + Iterate(data)]);
  _$jscoverage['utility.js'][121]++;
  return data;
})}, configurable: false, enumerable: true, writable: true}, noop: {value: (function noop() {
}), configurable: false, enumerable: true, writable: true}, apply: {value: require("async").apply, configurable: true, enumerable: true, writable: true}, defaults: {value: (function defaults(target, defaults) {
  _$jscoverage['utility.js'][160]++;
  if (! target && ! defaults) {
    _$jscoverage['utility.js'][161]++;
    return ({});
  }
  _$jscoverage['utility.js'][165]++;
  target = Object.keys(target || {}).length? target: {};
  _$jscoverage['utility.js'][168]++;
  return require("lodash").defaults.apply({}, arguments);
}), configurable: true, enumerable: true, writable: true}, watch: {value: (function watch(target, prop, handler) {
  _$jscoverage['utility.js'][190]++;
  var oldval = target[prop];
  _$jscoverage['utility.js'][191]++;
  var newval = oldval;
  _$jscoverage['utility.js'][192]++;
  var description = Object.getOwnPropertyDescriptor(target, prop) || {};
  _$jscoverage['utility.js'][194]++;
  switch (typeof target[prop]) {
  case "function":
    _$jscoverage['utility.js'][195]++;
    break;
  case "object":
    _$jscoverage['utility.js'][196]++;
    break;
  case "string":
    _$jscoverage['utility.js'][197]++;
    break;
  case "number":
    _$jscoverage['utility.js'][198]++;
    break;
  }
  _$jscoverage['utility.js'][202]++;
  if (description.configurable === false || ! (delete target[prop])) {
    _$jscoverage['utility.js'][203]++;
    return target;
  }
  _$jscoverage['utility.js'][206]++;
  return Object.defineProperty(target, prop, {get: (function get() {
  _$jscoverage['utility.js'][208]++;
  return newval;
}), set: (function set(val) {
  _$jscoverage['utility.js'][211]++;
  oldval = newval;
  _$jscoverage['utility.js'][214]++;
  newval = val;
  _$jscoverage['utility.js'][217]++;
  return newval = handler.call(target, prop, oldval, val);
}), enumerable: description.enumerable, configurable: true});
}), configurable: true, enumerable: true, writable: true}, unwatch: {value: (function unwatch(prop) {
  _$jscoverage['utility.js'][241]++;
  var val = this[prop];
  _$jscoverage['utility.js'][242]++;
  var description = Object.getOwnPropertyDescriptor(this, prop);
  _$jscoverage['utility.js'][245]++;
  if (description.configurable === false || ! (delete this[prop])) {
    _$jscoverage['utility.js'][246]++;
    return this;
  }
  _$jscoverage['utility.js'][249]++;
  this[prop] = val;
  _$jscoverage['utility.js'][251]++;
  return this;
}), configurable: true, enumerable: true, writable: true}, query: {value: (function query(obj, str) {
  _$jscoverage['utility.js'][268]++;
  if (! str) {
    _$jscoverage['utility.js'][269]++;
    return obj;
  }
  _$jscoverage['utility.js'][272]++;
  if ("object" === typeof str) {
  }
  _$jscoverage['utility.js'][276]++;
  try {
    _$jscoverage['utility.js'][277]++;
    return str.split(".").reduce((function (o, x) {
  _$jscoverage['utility.js'][278]++;
  return o[x];
}), obj);
  }
  catch (error) {
    _$jscoverage['utility.js'][282]++;
    return null;
  }
}), configurable: true, enumerable: true, writable: true}, unwrap: {value: (function unwrap(string, value, hash, seperator) {
  _$jscoverage['utility.js'][312]++;
  if (hash == null) {
    _$jscoverage['utility.js'][312]++;
    hash = {};
  }
  _$jscoverage['utility.js'][313]++;
  if (seperator == null) {
    _$jscoverage['utility.js'][313]++;
    seperator = ".";
  }
  _$jscoverage['utility.js'][314]++;
  var parts = string.split(seperator);
  _$jscoverage['utility.js'][315]++;
  var refHash = hash;
  _$jscoverage['utility.js'][316]++;
  var depth = 0;
  _$jscoverage['utility.js'][318]++;
  parts.forEach((function (part) {
  _$jscoverage['utility.js'][319]++;
  if (depth == parts.length - 1) {
    _$jscoverage['utility.js'][320]++;
    refHash[part] = value;
  }
  else {
    _$jscoverage['utility.js'][322]++;
    if (refHash[part] == null) {
      _$jscoverage['utility.js'][322]++;
      refHash[part] = {};
    }
    _$jscoverage['utility.js'][323]++;
    refHash = refHash[part];
  }
  _$jscoverage['utility.js'][326]++;
  depth++;
}));
  _$jscoverage['utility.js'][330]++;
  return hash;
}), configurable: true, enumerable: true, writable: true}, mixin: {value: (function mixin(source, target) {
  _$jscoverage['utility.js'][347]++;
  source = this.prototype || arguments[0] || {};
  _$jscoverage['utility.js'][348]++;
  target = arguments.length == 2? arguments[1]: arguments[1] || {};
  _$jscoverage['utility.js'][350]++;
  for (var key in source) {
    _$jscoverage['utility.js'][352]++;
    try {
      _$jscoverage['utility.js'][353]++;
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key) || {value: source[key], enumerable: false, writable: true, configurable: true});
    }
    catch (error) {
      _$jscoverage['utility.js'][359]++;
      console.error(error);
    }
}
  _$jscoverage['utility.js'][363]++;
  return target;
}), configurable: true, writable: true, enumerable: false}, inherit: {value: (function inherit(target, source) {
  _$jscoverage['utility.js'][379]++;
  target = target || {};
  _$jscoverage['utility.js'][380]++;
  source = source || {};
  _$jscoverage['utility.js'][384]++;
  Object.getOwnPropertyNames(source).forEach((function (key) {
  _$jscoverage['utility.js'][385]++;
  if (! target.hasOwnProperty(key)) {
    _$jscoverage['utility.js'][385]++;
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }
}));
  _$jscoverage['utility.js'][388]++;
  return target;
}), enumerable: true}, flatten: {value: (function flatten(data, options) {
  _$jscoverage['utility.js'][401]++;
  options = Utility.defaults(options, {delimiter: 1});
  _$jscoverage['utility.js'][405]++;
  return Array.prototype.concat(data).join(options.delimiter).toLowerCase();
}), enumerable: true}, flatten_obj: {value: (function flatten_obj(obj) {
  _$jscoverage['utility.js'][414]++;
  var list = {};
  _$jscoverage['utility.js'][416]++;
  (function callee(o, r) {
  _$jscoverage['utility.js'][418]++;
  r = r || "";
  _$jscoverage['utility.js'][420]++;
  if (typeof o != "object") {
    _$jscoverage['utility.js'][421]++;
    return true;
  }
  _$jscoverage['utility.js'][424]++;
  for (var c in o) {
    _$jscoverage['utility.js'][426]++;
    if (callee(o[c], r + "." + c)) {
      _$jscoverage['utility.js'][428]++;
      list[r.substring(1) + "." + c] = o[c];
    }
}
  _$jscoverage['utility.js'][432]++;
  return false;
})(obj);
  _$jscoverage['utility.js'][436]++;
  return list;
}), enumerable: true}, inherit_full: {value: (function inherit_prototype(target, constructor) {
  _$jscoverage['utility.js'][451]++;
  target.super_ = constructor;
  _$jscoverage['utility.js'][453]++;
  target.prototype = Object.create(constructor.prototype, {constructor: {value: constructor, enumerable: false, writable: true, configurable: true}});
}), configurable: true, enumerable: true, writable: true}, constructors: {value: (function constructors(context, options) {
  _$jscoverage['utility.js'][475]++;
  context = context || {};
  _$jscoverage['utility.js'][476]++;
  options = options || {};
  _$jscoverage['utility.js'][478]++;
  var matches = {};
  _$jscoverage['utility.js'][479]++;
  var path = [];
  _$jscoverage['utility.js'][481]++;
  do {
    _$jscoverage['utility.js'][483]++;
    if (context.constructor) {
      _$jscoverage['utility.js'][484]++;
      path.push(context.constructor.name);
      _$jscoverage['utility.js'][486]++;
      Object.defineProperty(matches, context.constructor.name, {enumerable: true, writable: true, value: {name: context.constructor.name, properties: {constructor: {type: typeof context.constructor, properties: Object.getOwnPropertyNames(context.constructor)}, prototype: {type: typeof context.constructor.prototype, properties: Object.keys(context.constructor.prototype)}}}});
    }
}
  while (context = Object.getPrototypeOf(context));
  _$jscoverage['utility.js'][508]++;
  if (options.format === "schema") {
    _$jscoverage['utility.js'][509]++;
    return matches || {};
  }
  _$jscoverage['utility.js'][512]++;
  if (options.delimiter) {
    _$jscoverage['utility.js'][513]++;
    return path.join(options.delimiter);
  }
  _$jscoverage['utility.js'][516]++;
  return path;
}), configurable: true, enumerable: true, writable: true}, unique: {value: (function unique(array) {
  _$jscoverage['utility.js'][531]++;
  var b = [];
  _$jscoverage['utility.js'][532]++;
  for (var i = 0; i < array.length; i++) {
    _$jscoverage['utility.js'][533]++;
    if (b.indexOf(array[i]) == -1) {
      _$jscoverage['utility.js'][533]++;
      b.push(array[i]);
    }
}
  _$jscoverage['utility.js'][535]++;
  return b;
}), configurable: true, enumerable: true, writable: true}, hash: {value: (function hash(obj) {
  _$jscoverage['utility.js'][559]++;
  var result;
  _$jscoverage['utility.js'][560]++;
  var string = JSON.stringify(arguments[0] || {});
  _$jscoverage['utility.js'][561]++;
  var options = Utility.defaults(arguments[1], {type: "md5", silent_fail: true, random: false});
  _$jscoverage['utility.js'][567]++;
  try {
    _$jscoverage['utility.js'][569]++;
    if (options.random) {
      _$jscoverage['utility.js'][570]++;
      string = Math.random().toString();
    }
    _$jscoverage['utility.js'][573]++;
    result = require("crypto").createHash(options.type.toLowerCase()).update(string).digest("hex");
  }
  catch (error) {
    _$jscoverage['utility.js'][575]++;
    result = options.silent_fail? "": error;
  }
  _$jscoverage['utility.js'][578]++;
  return result;
}), configurable: true, enumerable: true, writable: true}, auto: {value: require("async").auto}, queue: {value: require("async").queue}, times: {value: require("async").times}, extend: {value: require("lodash").extend}, values: {value: require("lodash").values}, each: {value: require("lodash").each}, toArray: {value: require("lodash").toArray}, where: {value: require("lodash").where}, if: {value: {"PlainObject": require("lodash").isPlainObject, "Function": require("lodash").isFunction, "Object": require("lodash").isObject, "String": require("lodash").isString}, enumerable: true}, log: {value: Object.defineProperties((function () {
  _$jscoverage['utility.js'][620]++;
  var output = {};
  _$jscoverage['utility.js'][623]++;
  if (this.event) {
    _$jscoverage['utility.js'][624]++;
    output.event = this.event;
  }
  _$jscoverage['utility.js'][627]++;
  Utility.each(arguments, (function (item, key) {
  _$jscoverage['utility.js'][629]++;
  if (Utility["if"].PlainObject(item)) {
  }
  _$jscoverage['utility.js'][631]++;
  output.format = typeof item;
  _$jscoverage['utility.js'][633]++;
  if (key === 0) {
    _$jscoverage['utility.js'][634]++;
    output.data = item;
  }
  else {
    _$jscoverage['utility.js'][636]++;
    output[key] = item;
  }
}));
  _$jscoverage['utility.js'][641]++;
  console.log(require("util").inspect(output, Utility.log.config));
  _$jscoverage['utility.js'][643]++;
  return this;
}), {"config": {value: {"showHidden": true, "depth": 2, "colors": true}, "writable": true}}), enumerable: true}});
_$jscoverage['utility.js'].source = ["/**"," * Helper Utility for Abstract"," *"," * @example"," *"," *    // Select specific methods to load"," *    var my_tools = Abstract.utility( 'if', 'extend', 'flatten', 'unwatch', 'watch' );"," *"," * @for abstract"," * @submodule abstract-utility"," * @author potanin@UD"," * @date 6/17/13"," */","function Utility() {","  return Object.keys( arguments ) ? require( 'lodash' ).pick.apply( null, [ Utility, Array.prototype.slice.call( arguments ) ] ) : Utility;","}","","Object.defineProperties( module.exports = Utility, {","  json: {","    value: {","      /**","       * Safely parse JSON","       *","       * @method parse","       * @for Json","       *","       * @param json","       * @return {parsed|json}","       */","      parse: function( json ) {","","        if( Buffer &amp;&amp; json instanceof Buffer ) {","          json = json.toString()","        }","","        var parsed = false;","        try { parsed = JSON.parse( json ); } catch (e) { parsed = false; }","        return parsed ? parsed : json;","      }","    },","    configurable: false,","    enumerable: true,","    writable: true","  },","  console: {","    value: {","      /**","       * Prety Print complex objects","       *","       * @param data","       * @param depth","       *","       * @requires lodash","       * @method console_json","       * @return {Object} The first argument.","       */","      json: function json( data, depth ) {","","        try {","","          if( 'string' === typeof data &amp;&amp; ( 'object' === typeof depth || 'function' === typeof depth ) ) {","            console.log( \"\\n\" + '===============' + data + ' Properties===============' );","            data = depth;","            depth = arguments[2] || 1","          }","","          var output = require( 'util' ).inspect( data, false, 'number' === typeof depth ? ( depth - 1 ) : 1, true );","","          console.log( output );","","        } catch( error ) { console.error( 'Error with console.json()', error ); }","","        return arguments[0];","","      },","      /**","       * Pretty Print and Object's Methods","       *","       * @param data","       * @param object","       *","       * @requires lodash","       * @method console_methods","       * @return {Object} The first argument.","       */","      method: function method( data, object ) {","","        try {","","          if( 'string' === typeof data &amp;&amp; ( 'object' === typeof object || 'function' === typeof object ) ) {","            console.log( \"\\n\" + '===============' + data + ' Methods===============' );","            data = object;","          }","","          module.exports.json( _.methods( data ) );","","        } catch( error ) { console.error( 'Error with console.methods()', error ); }","","        return arguments[0];","","      },","      /**","       * Get all Object Keys","       *","       * @param data","       *","       * @method console_keys","       * @return {Object} The first argument.","       */","      keys: function keys( data ) {","","        function Iterate( target ) {","          var result = [];","          for( var key in target ) {","            result.push( key );","          }","          return result;","        }","","        console.log([ Object.keys( data ) + Object.getOwnPropertyNames( data ) + Iterate( data ) ]);","        return data;","      }","    },","    configurable: false,","    enumerable: true,","    writable: true","  },","  noop: {","    /**","     * Not a function, that's for sure.","     * This method does not accept any arguments.","     */","    value: function noop() {","      // console.log( arguments )","    },","    configurable: false,","    enumerable: true,","    writable: true","  },","  apply: {","    /**","     * Creates a continuation function with some arguments already applied.","     *","     * @uses async","     */","    value: require( 'async' ).apply,","    configurable: true,","    enumerable: true,","    writable: true","  },","  defaults: {","    /**","     * Configure Defaults for an Object","     *","     * @returns {Object}","     */","    value: function defaults( target, defaults ) {","","      // If no arguments, return empty object","      if( !target &amp;&amp; !defaults ) {","        return {};","      }","","      // Ensure target is an object","      target = Object.keys( target || {} ).length ? target : {};","","      // Lodash-it","      return require( 'lodash' ).defaults.apply( {}, arguments );","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  watch: {","    /**","     * Watch a Single Property","     *","     * @param {Object} prop","     * @param {callback} handler","     *","     * @method watch","     * @for abstract-utility","     *","     * @chainable","     *","     * @return {Object} newval","     */","    value: function watch( target, prop, handler ) {","      var oldval = target[prop];","      var newval = oldval;","      var description = Object.getOwnPropertyDescriptor( target, prop ) || {};","","      switch( typeof target[prop] ) {","        case 'function':break;","        case 'object':break;","        case 'string':break;","        case 'number':break;","      }","","      // Delete original property and replace with getter/setter if possible","      if( description.configurable === false || !( delete target[ prop ] ) ) {","        return target;","      }","","      return Object.defineProperty( target, prop, {","        get: function get() {","          return newval;","        },","        set: function set( val ) {","          oldval = newval;","","          // Set value","          newval = val;","","          // Execute hander and potentially mody value","          return newval = handler.call( target, prop, oldval, val );","","        },","        enumerable: description.enumerable,","        configurable: true","      });","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  unwatch: {","    /**","     * Unwatch a Single Property","     *","     * @param {Object} prop","     *","     * @method unwatch","     * @for abstract-utility","     *","     * @return null","     */","    value: function unwatch( prop ) {","      var val = this[prop];","      var description = Object.getOwnPropertyDescriptor( this, prop );","","      // Shouldn't happen, but just in case.","      if( description.configurable === false || !( delete this[ prop ] ) ) {","        return this;","      }","","      this[prop] = val;","","      return this;","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  query: {","    /**","     * Get property value using a dot notation path.","     *","     * @param obj","     * @param str","     * @returns {*}","     */","    value: function query( obj, str ) {","","      if( !str ) {","        return obj;","      }","","      if( 'object' === typeof str ) {","        // @todo Convert Object to dot notation, using the first full dot notation path.","      }","","      try {","        return str.split( '.' ).reduce( function( o, x ) {","          return o[x]","        }, obj);","","      } catch( error ) {","        return null;","      }","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  unwrap: {","    /**","     * Unwrap dot notation string to nested Object","     *","     * @example","     *","     *    Utility.unwrap( 'first_name', 'john' );  // -&gt; { first_name: 'John' }","     *    Utility.unwrap( 'name.first', 'john' );  // -&gt; { name: { first: 'John' } }","     *    Utility.unwrap( 'first_name' );          // -&gt; null","     *    Utility.unwrap( 'name.first' );          // -&gt; null","     *","     *    // Will not modify object if already exists","     *    Utility.unwrap( 'name.first.fail', 'Anything' );","     *","     * @param string","     * @param value","     * @param hash","     * @param seperator","     * @,etjpd unwrap","     * @return {*}","     */","    value: function unwrap( string, value, hash, seperator ) {","      if( hash == null ) { hash = {}; }","      if( seperator == null ) { seperator = '.'; }","      var parts = string.split( seperator );","      var refHash = hash;","      var depth = 0;","","      parts.forEach( function( part ) {","        if( depth == parts.length - 1 ) {","          refHash[part] = value;","        } else {","          if( refHash[part] == null ) { refHash[part] = {}; }","          refHash = refHash[part];","        }","","        depth++;","","      });","","      return hash;","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  mixin: {","    /**","     * Mixin current prototype into target object","     *","     * Honors property descriptor settings, if available.","     *","     * @param source","     * @param target","     */","    value: function mixin( source, target ) {","      source = this.prototype || arguments[0] || {};","      target = arguments.length == 2 ? arguments[1] : arguments[1] || {};","","      for( var key in source ) {","","        try {","          Object.defineProperty( target, key, Object.getOwnPropertyDescriptor( source, key ) || {","            value: source[key],","            enumerable: false,","            writable: true,","            configurable: true","          });","        } catch( error ) { console.error( error ); }","","      }","","      return target;","","    },","    configurable: true,","    writable: true,","    enumerable: false","  },","  inherit: {","    /**","     * Carefully Inherit Properties","     *","     * @param target {Object} Object to add properties to.","     * @param target {Object} Source object.","     * @returns {Object} Extended target.","     */","    value: function inherit( target, source ) {","      target = target || {};","      source = source || {};","","      //if( target instanceof source ) {}","","      Object.getOwnPropertyNames( source ).forEach( function( key ) {","        if( !target.hasOwnProperty( key ) ) { Object.defineProperty( target, key, Object.getOwnPropertyDescriptor( source, key ) ); }","      });","","      return target;","","    },","    enumerable: true","  },","  flatten: {","    /**","     * Flatten Array","     *","     * @todo Notice - nested arrays will not honor delimiter.","     */","    value: function flatten( data, options ) {","","      options = Utility.defaults( options, {","        delimiter: 1","      });","","      return Array.prototype.concat( data ).join( options.delimiter ).toLowerCase();","","","    },","    enumerable: true","  },","  flatten_obj: {","    value: function flatten_obj( obj ) {","","      var list = {};","","      (function callee(o, r) {","","        r = r || '';","","        if (typeof o != 'object') {","          return true;","        }","","        for (var c in o) {","","          if ( callee( o[c], r + \".\" + c ) ) {","","            list[r.substring(1) + \".\" + c] = o[c]","          }","        }","","        return false;","","      })(obj);","","      return list;","    },","    enumerable: true","  },","  inherit_full: {","    /**","     * Inherit the prototype methods from one constructor into another.","     *","     * Copy of the Node.js util.inherits method.","     *","     * @param {function} target Constructor function which needs to inherit the prototype.","     * @param {function} constructor Constructor function to inherit prototype from.","     */","    value: function inherit_prototype( target, constructor ) {","","      target.super_ = constructor;","","      target.prototype = Object.create( constructor.prototype, {","        constructor: {","          value: constructor,","          enumerable: false,","          writable: true,","          configurable: true","        }","      });","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  constructors: {","    /**","     * Walk up the prototype chain, creating a JSON-Schema-esque structure","     *","     * @param context {Object} The object to walk through.","     * @return {Object} JSON Schema-esque constructor chain.","     */","    value: function constructors( context, options ) {","      context = context || {};","      options = options || {};","","      var matches = {};","      var path = [];","","      do {","","        if( context.constructor ) {","          path.push( context.constructor.name );","","          Object.defineProperty( matches, context.constructor.name, {","            enumerable: true,","            writable: true,","            value: {","              name: context.constructor.name,","              properties: {","                constructor: {","                  type: typeof context.constructor,","                  properties: Object.getOwnPropertyNames( context.constructor )","                },","                prototype: {","                  type: typeof context.constructor.prototype,","                  properties: Object.keys( context.constructor.prototype )","                }","              }","            }","          });","","        }","","      } while ( context = Object.getPrototypeOf( context ) );","","      if( options.format === 'schema' ) {","        return matches || {};","      }","","      if( options.delimiter ) {","        return path.join( options.delimiter );","      }","","      return path;","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  unique: {","    /**","     * Return unique values of an array","     *","     * @param array","     * @returns {Array}","     */","    value: function unique( array ){","      var b = [];","      for(var i=0; i&lt;array.length; i++){","        if(b.indexOf(array[i]) == -1) b.push(array[i]);","      }","      return b;","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  hash: {","    /**","     * Generate a unique hash for an Object, using md5 on default.","     *","     * @example","     *","     *    var _hash = Utility.hash({ type: 'some_object', name: 'Bob'});","     *","     *    console.log( _hash ); // -&gt; 147ce3e2ccb7db6b928b303ce42bdafa","     *","     * @param obj {Object} Object to generate a hash for.","     * @param options {Object} options for hash generation.","     * @param options {String} options.type Type of hash to generate, defaulting to md5.","     * @param options {String} options.silent_fail Do not throw errors, return empty string if there was an error when true.","     *","     */","    value: function hash( obj ) {","","      var result;","      var string = JSON.stringify( arguments[0] || {} );","      var options = Utility.defaults( arguments[1], {","        type: 'md5',","        silent_fail: true,","        random: false","      });","","      try {","","        if( options.random ) {","          string = Math.random().toString();","        }","","        result = require( 'crypto' ).createHash( options.type.toLowerCase() ).update( string ).digest( 'hex' );","      } catch ( error ) {","        result = options.silent_fail ? '' : error;","      }","","      return result;","","    },","    configurable: true,","    enumerable: true,","    writable: true","  },","  auto: { value: require( 'async' ).auto },","  queue: { value: require( 'async' ).queue },","  times: { value: require( 'async' ).times },","  extend: { value: require( 'lodash' ).extend },","  values: { value: require( 'lodash' ).values },","  each: { value: require( 'lodash' ).each },","  toArray: { value: require( 'lodash' ).toArray },","  where: { value: require( 'lodash' ).where },","  if: {","    value: {","      \"PlainObject\": require( 'lodash' ).isPlainObject,","      \"Function\": require( 'lodash' ).isFunction,","      \"Object\": require( 'lodash' ).isObject,","      \"String\": require( 'lodash' ).isString,","    },","    enumerable: true","  },","  log: {","    /**","     * Output variables to console log.","     *","     * Settings can be configured like so:","     *    abstract.log.config.depth = 2;","     *    abstract.log.config.colors = true;","     *","     * @param {Object|String} data A config object","     * @example","     *      Abstract.log( data )","     *","     * method log","     * @return {Object} Abstract constructor.","     * @chainable","     */","    value: Object.defineProperties( function() {","","      var output = {};","","      // Capture Event Name","      if( this.event ) {","        output.event = this.event;","      }","","      Utility.each( arguments, function( item, key ) {","","        if( Utility.if.PlainObject( item ) ) {}","","        output[ 'format' ] = typeof item;","","        if( key === 0 ) {","          output[ 'data' ] = item;","        } else {","          output[ key ] = item;","        }","","      });","","      console.log( require( 'util' ).inspect( output, ( Utility ).log.config ) );","","      return this;","    }, { \"config\": { value: { \"showHidden\": true, \"depth\": 2, \"colors\": true }, \"writable\": true } }),","    enumerable: true","  }","});"];
